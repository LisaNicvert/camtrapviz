[{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/activity-patterns.html","id":"import-and-prepare-data","dir":"Articles","previous_headings":"","what":"Import and prepare data","title":"Activity patterns","text":"","code":"data(recordTableSample, package = \"camtrapR\")  # recordTableSample$DateTimeOriginal <- as.POSIXct(recordTableSample$DateTimeOriginal) # recordTableSample$Date <- as.Date(recordTableSample$Date)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/activity-patterns.html","id":"infer-activity-patterns","dir":"Articles","previous_headings":"","what":"Infer activity patterns","title":"Activity patterns","text":"First, infer species PBE circadian activity pattern mixture von Mises distributions using function fit_vonMises. , can examine model: can also compute density models parameters using vonMises_density. default, density computed 0 \\(2\\pi\\) step 0.01 can changed x argument. can plot inferred model.  also possible plot binned data:","code":"# Convert hours to times format recordTableSample$Time <- chron::times(recordTableSample$Time)  # Select the desired species PBE_records <- recordTableSample[recordTableSample$Species == \"PBE\", ]  # Fit distribution vm1 <- fit_vonMises(PBE_records$Time, k = 1) class(vm1) #> [1] \"movMF\"  vm1 #> theta: #>          x          y #> 1 1.679677 0.08021026 #> alpha: #> [1] 1 #> L: #> [1] 8.312426 d_vm1 <- vonMises_density(vm1) d_vm1 <- vonMises_density(vm1,                           x = circular::circular(seq(0, 2 * pi, by = 0.001), units = \"radians\")) ggplot(d_vm1) +         geom_line(aes(x = x, y = density)) +         scale_x_continuous(breaks = seq(0, 24, by = 4)) +         xlab(\"Time (hours)\") +         ylab(\"Density\") +         theme_linedraw() ggplot(d_vm1) +         geom_histogram(data = PBE_records,                         aes(x = Time,                            y = after_stat(density)),                        binwidth = 1,                        alpha = 0.7) +         geom_line(aes(x = x, y = density)) +         scale_x_continuous(breaks = seq(0, 24, by = 4)) +         xlab(\"Time (hours)\") +         ylab(\"Density\") +         theme_linedraw()"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"import-and-prepare-data","dir":"Articles","previous_headings":"","what":"Import and prepare data","title":"Plots","text":"","code":"data(recordTableSample, package = \"camtrapR\") data(camtraps, package = \"camtrapR\") recordTableSample$DateTimeOriginal <- as.POSIXct(recordTableSample$DateTimeOriginal) recordTableSample$Date <- as.Date(recordTableSample$Date) recordTableSample$Time <- chron::times(recordTableSample$Time)  camtraps$Setup_date <- as.Date(camtraps$Setup_date, format = \"%d/%m/%Y\") camtraps$Retrieval_date <- as.Date(camtraps$Retrieval_date, format = \"%d/%m/%Y\")"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"plot-observations","dir":"Articles","previous_headings":"","what":"Plot observations","title":"Plots","text":"package provides function plot observations camera.  timestamp_col present, can also used.  also possible provide column points colors:  providing additional info, also possible vizualise sampling period graph.  Various options available customize graph:  Using ggiraph, plot can also made interactive:","code":"plot_points(recordTableSample,             camera_col = \"Station\",             date_col = \"Date\",              time_col = \"Time\") plot_points(recordTableSample,             camera_col = \"Station\",             timestamp_col = \"DateTimeOriginal\") plot_points(recordTableSample,             camera_col = \"Station\",             points_col = \"Species\",             timestamp_col = \"DateTimeOriginal\") plot_points(recordTableSample,              camera_col = \"Station\",              points_col = \"Species\",             timestamp_col = \"DateTimeOriginal\",             caminfo = camtraps,             caminfo_setup = \"Setup_date\",             caminfo_retrieval = \"Retrieval_date\") spp <- unique(recordTableSample$Species) pal <- RColorBrewer::brewer.pal(length(spp), \"Purples\")  plot_points(recordTableSample,              camera_col = \"Station\",              points_col = \"Species\",             timestamp_col = \"DateTimeOriginal\",             caminfo = camtraps,             caminfo_setup = \"Setup_date\",             caminfo_retrieval = \"Retrieval_date\",             fill_rect = \"grey\",             alpha_rect = 0.2,             col_rect = NA,              height_rect = 0.5,             ptsize = 3,             cols = pal) p <- plot_points(recordTableSample,                   camera_col = \"Station\",                   points_col = \"Species\",                  timestamp_col = \"DateTimeOriginal\",                  caminfo = camtraps,                  caminfo_setup = \"Setup_date\",                  caminfo_retrieval = \"Retrieval_date\",                  interactive = TRUE) ggiraph::girafe(ggobj = p)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"plot-cameras","dir":"Articles","previous_headings":"","what":"Plot cameras","title":"Plots","text":"package also provides function plot cameras Leaflet. , dataset already projected using UTM zone 50 (East Asia)/ Therefore, provide EPSG code use (EPSG:32650).","code":"plot_map(camtraps,           cam_col = \"Station\",          lat_col = \"utm_y\", lon_col = \"utm_x\",           crs = 32650)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"plot-species","dir":"Articles","previous_headings":"","what":"Plot species","title":"Plots","text":"package also includes simple function plot species counts.  count column, can also included.  Finally, observation type column, NA values species column replaced values observation type.","code":"plot_species_bars(recordTableSample,                    spp_col = \"Species\") with_count <- recordTableSample |>    mutate(count = 2)  plot_species_bars(with_count,                    spp_col = \"Species\", count_col = \"count\") with_obstype <- recordTableSample |>    mutate(type = \"animal\") with_obstype <- rbind(with_obstype,                       c(rep(NA, 11), \"human\"))  plot_species_bars(with_obstype,                    spp_col = \"Species\", obs_col = \"type\")"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"write-data-in-tempfile","dir":"Articles","previous_headings":"","what":"Write data in tempfile","title":"Read and clean data","text":"","code":"# csv files ------------------------------------------ data(recordTableSample, package = \"camtrapR\") data(camtraps, package = \"camtrapR\")  # Create subfolder dir.create(paste0(tempdir(), \"/csv\"))  # Write files recordfile <- paste0(tempdir(), \"/csv/records.csv\") camtrapfile <- paste0(tempdir(), \"/csv/camtraps.csv\")  write.csv(recordTableSample, recordfile,            row.names = FALSE) write.csv(camtraps, camtrapfile,            row.names = FALSE) # csv camera ------------------------------------------ # Create file recordcam <- recordTableSample |>   dplyr::left_join(camtraps, by = \"Station\")  # Create subfolder dir.create(paste0(tempdir(), \"/csvcam\"))  # Write file recordcamfile <- paste0(tempdir(), \"/csvcam/recordcam.csv\") write.csv(recordcam, recordcamfile,            row.names = FALSE)"},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"read-data","dir":"Articles","previous_headings":"Records and cameras in separate csv files (2 csv files)","what":"Read data","title":"Read and clean data","text":"imported file list one component $data containing 2 dataframes: $observations contains records $deployments contains cameras information","code":"dat <- read_data(records_path = recordfile,                  cameras_path = camtrapfile,                  sep_records = \",\", sep_cameras = \",\")"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"clean-data","dir":"Articles","previous_headings":"Records and cameras in separate csv files (2 csv files)","what":"Clean data","title":"Read and clean data","text":"step ensures columns desired type.","code":"rec_type <- list(Station = \"as.character\",                  Date = list(\"as_date\",                              format = \"%Y-%m-%d\"),                  Time = \"times\",                  DateTimeOriginal = \"as.POSIXct\")  cam_type <- list(Station = \"as.character\",                  Setup_date = list(\"as.Date\",                                    format = \"%d/%m/%Y\"),                   Retrieval_date = list(\"as.Date\",                                        format = \"%d/%m/%Y\"))  dat_clean <- clean_data(dat,                          rec_type = rec_type,                         cam_type = cam_type)"},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"read-data-1","dir":"Articles","previous_headings":"Records and cameras in the same csv (1 csv file)","what":"Read data","title":"Read and clean data","text":"imported file list one component $data: $data$observations contains cameras records information $data$deployments NULL","code":"dat <- read_data(records_path = recordcamfile,                  sep_records = \",\")"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"clean-data-1","dir":"Articles","previous_headings":"Records and cameras in the same csv (1 csv file)","what":"Clean data","title":"Read and clean data","text":"step spilt information cameras records. move columns listed cam_type cameras file.","code":"cam_type2 <- list(Station = \"as.character\",                   Setup_date = list(\"as.Date\",                                     format = \"%d/%m/%Y\"),                    Retrieval_date = list(\"as.Date\",                                         format = \"%d/%m/%Y\"),                   utm_y = \"as.numeric\",                   utm_x = \"as.numeric\",                   Problem1_from = list(\"as.Date\",                                        format = \"%d/%m/%Y\"),                   Problem1_to = list(\"as.Date\",                                      format = \"%d/%m/%Y\"))  dat_clean <- clean_data(dat,                          rec_type = rec_type,                         cam_type = cam_type2,                         cam_col_records = \"Station\",                         split = TRUE)"},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"read-data-2","dir":"Articles","previous_headings":"CamtrapDP format (json file)","what":"Read data","title":"Read and clean data","text":"","code":"# dat <- read_data(records_path = \"https://raw.githubusercontent.com/tdwg/camtrap-dp/1.0-rc.1/example/datapackage.json\")"},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/articles/summarize.html","id":"import-and-prepare-data","dir":"Articles","previous_headings":"","what":"Import and prepare data","title":"Summarize","text":"","code":"data(recordTableSample, package = \"camtrapR\") data(camtraps, package = \"camtrapR\") recordTableSample$DateTimeOriginal <- as.POSIXct(recordTableSample$DateTimeOriginal) recordTableSample$Date <- as.Date(recordTableSample$Date) recordTableSample$Time <- chron::times(recordTableSample$Time)  camtraps$Setup_date <- as.Date(camtraps$Setup_date, format = \"%d/%m/%Y\") camtraps$Retrieval_date <- as.Date(camtraps$Retrieval_date, format = \"%d/%m/%Y\")"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/summarize.html","id":"camera-information","dir":"Articles","previous_headings":"","what":"Camera information","title":"Summarize","text":"can summarize camera sampling function summarize_cameras. start end dates taken data sampling length computed using cameraOperation matrix camtrapR package. provide observation dataframe, sampling computed first last picture. summary table following columns: first column named cameras ID column (Station) contains cameras ID setup contains start sampling camera. retrieval contains end sampling camera. setup_origin containing method used determine start sampling (possible values picture setup) retrieval_origin containing method used determine end sampling (picture setup) sampling_length length sampling period days (computed cameraOperation function camtrapR package). provide cameras dataframe, whenever possible sampling information obtained setup retrieval columns. information missing camera dataframe, information observations used.","code":"camsum <- summarize_cameras(recordTableSample,                             cam_col = \"Station\",                             date_col = \"Date\",                             time_col = \"Time\") #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) #> CTtable was converted from tibble to data.frame knitr::kable(camsum) camsum <- summarize_cameras(recordTableSample,                             cam_col = \"Station\",                             date_col = \"Date\",                             time_col = \"Time\",                             dfcam = camtraps,                              cam_col_dfcam = \"Station\",                              setup_col = \"Setup_date\",                             retrieval_col = \"Retrieval_date\") #> CTtable was converted from tibble to data.frame knitr::kable(camsum) cam_missing <- camtraps cam_missing$Retrieval_date[cam_missing$Station == \"StationA\"] <- NA  knitr::kable(cam_missing |>                 select(Station, Setup_date, Retrieval_date)) camsum <- summarize_cameras(recordTableSample,                             cam_col = \"Station\",                             date_col = \"Date\",                             time_col = \"Time\",                             dfcam = cam_missing,                              cam_col_dfcam = \"Station\",                              setup_col = \"Setup_date\",                             retrieval_col = \"Retrieval_date\") #> CTtable was converted from tibble to data.frame knitr::kable(camsum)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/summarize.html","id":"species-information","dir":"Articles","previous_headings":"","what":"Species information","title":"Summarize","text":"can also summarize species sightings function summarize_species. summary table following columns: first column named species column (Species) contains species name n_sightings number sightings species (corresponding row coun data) n_individuals takes account information counting column (provided). Else, n_sightings n_cameras gives number cameras species observed . prop_cam gives proportion cameras species observed . can also include count information: obs_col included, final table one column describing type values summarized species_col obs_col.","code":"sppsum <- summarize_species(recordTableSample,                             species_col = \"Species\",                              cam_col = \"Station\") knitr::kable(sppsum) with_count <- recordTableSample |>    mutate(count = 3) sppsum <- summarize_species(with_count,                             species_col = \"Species\",                              cam_col = \"Station\",                              count_col = \"count\") knitr::kable(sppsum) with_obstype <- recordTableSample |>    mutate(type = \"animal\") with_obstype <- rbind(with_obstype,                       c(rep(NA, 11), \"human\")) with_obstype <- rbind(with_obstype,                       c(rep(NA, 11), \"fire\"))  sppsum <- summarize_species(with_obstype,                             species_col = \"Species\",                              cam_col = \"Station\",                              obs_col = \"type\") knitr::kable(sppsum)"},{"path":"https://lisanicvert.github.io/camtrapviz/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lisa Nicvert. Author, maintainer.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nicvert L (2023). camtrapviz: Vizualise Camera Trap Data. R package version 0.0.0.9000, https://lisanicvert.github.io/camtrapviz/.","code":"@Manual{,   title = {camtrapviz: Vizualise Camera Trap Data},   author = {Lisa Nicvert},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://lisanicvert.github.io/camtrapviz/}, }"},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"camtrapviz","dir":"","previous_headings":"","what":"Vizualise Camera Trap Data","title":"Vizualise Camera Trap Data","text":"package currently development camtrapviz R Shiny package designed make easier visualize summarize camera trap data species already identified. package website can found : https://lisanicvert.github.io/camtrapviz/. moment, package allows : read camera trap data one two CSV file(s) JSON metadata camtrapDP data package format data analysis summarize cameras species observation data plot data","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Vizualise Camera Trap Data","text":"install package, use:","code":"devtools::install_github(\"https://github.com/LisaNicvert/camtrapviz\",                           build_vignettes = TRUE)"},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"shiny-interface","dir":"","previous_headings":"","what":"Shiny interface","title":"Vizualise Camera Trap Data","text":"Shiny interface allows analyze camera trap data interactively. run app, use: Two example datasets provided, can also choose data analyze computer.","code":"run_camtrapviz()"},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Vizualise Camera Trap Data","text":"package also implements functions can used directly R. functions allow : Read camera trap data: function read_data allows read camera trap data one two CSV file(s) JSON camtrapDP file. Format data: function clean_data essentially casts column types. camera metadata species observations file, also separate observations cameras. Summarize data: possible summarize camera metadata summarize_camera get sampling start, end length. Species observations can also summarized summarize_species. get species sightings count, number proportions cameras species captured. Fit activity curve: functions fit_vonMises vonMises_density allow fit compute density curve. Plot data: several functions allow visualize data: plot observations plot_points, plot cameras interactive map plot_map (using leaflet), plot species abundance plot_species_bars…","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"vignettes","dir":"","previous_headings":"Functions","what":"Vignettes","title":"Vizualise Camera Trap Data","text":"R vignettes provided exemplify typical workflow analysis (work progress). vignette read--clean-data explains read data files format data analyses. vignette summarize explains summarize camera species information. vignette plots exemplifies different plots.","code":"vignette(\"read-and-clean-data\", package = \"camtrapviz\") vignette(\"summarize\", package = \"camtrapviz\") vignette(\"plots\", package = \"camtrapviz\")"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/add_tryformats.html","id":null,"dir":"Reference","previous_headings":"","what":"Add tryFormats — add_tryformats","title":"Add tryFormats — add_tryformats","text":"Adds tryFormats element specified elements castlist.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/add_tryformats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add tryFormats — add_tryformats","text":"","code":"add_tryformats(castlist, formats, names_to_add)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/add_tryformats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add tryFormats — add_tryformats","text":"castlist named list types conversions perform formats formats add tryFormats names_to_add names elements castlist add tryFormats element","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/add_tryformats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add tryFormats — add_tryformats","text":"original castlist specified elements new slot tryFormats contains formats vector. value castlist modify NULL, add tryFormats slot.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/camtrapviz-package.html","id":null,"dir":"Reference","previous_headings":"","what":"camtrapviz: Vizualise Camera Trap Data — camtrapviz-package","title":"camtrapviz: Vizualise Camera Trap Data — camtrapviz-package","text":"Compute visualize common descriptors camera trap data. Shiny app allowing interactively without code also implemented.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/camtrapviz-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"camtrapviz: Vizualise Camera Trap Data — camtrapviz-package","text":"Maintainer: Lisa Nicvert lisa.nicvert@univ-lyon1.fr (ORCID)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast columns — cast_columns","title":"Cast columns — cast_columns","text":"Converts columns given format.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast columns — cast_columns","text":"","code":"cast_columns(df, cast_type)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast columns — cast_columns","text":"df dataframe containing columns specified names cast_type. cast_type named list containing name function cast types. list's names names columns cast df. Elements list can : character giving valid function name call list first element function call (character) additional arguments function call (can named names functions' arguments).","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast columns — cast_columns","text":"original dataframe specified columns casted type indicated cast_type.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast columns — cast_columns","text":"","code":"df <- data.frame(num = 1:10,                  char = letters[1:10],                  date = rep(\"12/24/2020\", 10)) cast <- list(num = \"as.character\",              char = \"as.factor\",              date = list(\"as.Date\",                           format = \"%m/%d/%Y\")) dfcast <- cast_columns(df, cast)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean data — clean_data","title":"Clean data — clean_data","text":"Cleans data : splitting records data records cameras (needed) formatting cameras records tables: casting columns moving selected columns beginning only_shared_cameras TRUE: selecting subset cameras present records cameras tables","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean data — clean_data","text":"","code":"clean_data(   dat,   cam_type,   rec_type,   only_shared_cameras = FALSE,   cam_col_records,   cam_col_cameras = NULL,   split = FALSE )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean data — clean_data","text":"dat data clean. can either list one component $data datapackage object (inheriting list). Either way, data $data slot two components: $deployments (cameras table) $observations (records table) cam_type named list containing name function cast types cameras table. list's names names columns cast dat$data$deployments. details content list, see documentation cast_columns function. rec_type named list containing name function cast types records table. list's names names columns cast dat$data$observations. details content list, see documentation cast_columns function. only_shared_cameras Logical; restrict final data shared cameras dat$data$deployments dat$data$observations? cam_col_records Name column cameras names records (needed only_shared_cameras TRUE) cam_col_cameras Name column cameras names cameras (needed only_shared_cameras TRUE). NULL assumed cam_col_records. split Logical; camera data extracted records table splitting data?","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean data — clean_data","text":"object type original input, dat$data$deployments dat$data$observations cleaned described .","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean data — clean_data","text":"","code":"# Create synthetic dataset records <- data.frame(foo = 1:6,                       species = c(\"pigeon\", \"mouse\", \"pigeon\", \"mouse\", \"mouse\", \"pigeon\"),                       date = c(\"2022-01-01\", \"2022-03-01\",                                 \"2022-01-02\", \"2022-01-12\", \"2022-01-22\",                                \"2022-01-03\"),                       time = c(\"10:22:01\", \"22:12:01\",                                \"11:54:33\", \"07:14:38\", \"18:01:34\",                                 \"12:11:34\"),                       camera = c(\"A\", \"A\", \"B\", \"B\", \"B\", \"C\")) cameras <- data.frame(camera = c(\"A\", \"B\", \"C\"),                       lat = c(\"20.12\", \"20.22\", \"22.34\"),                       lon = c(\"33.44\", \"33.45\", \"33.42\")) dat <- list(data = list(observations = records,                         deployments = cameras)) rec_type <- list(species = \"as.character\",                  date = list(\"as.Date\",                                  format = \"%Y-%m-%d\"),                  time = \"times\",                  camera = \"as.character\") cam_type <- list(camera = \"as.character\",                  lat = \"as.numeric\",                  lon = \"as.numeric\") # Clean data converts columns to the appropriate types  # and reorders columns clean_data(dat,            rec_type = rec_type,            cam_type = cam_type) #> $data #> $data$observations #>   species       date     time camera foo #> 1  pigeon 2022-01-01 10:22:01      A   1 #> 2   mouse 2022-03-01 22:12:01      A   2 #> 3  pigeon 2022-01-02 11:54:33      B   3 #> 4   mouse 2022-01-12 07:14:38      B   4 #> 5   mouse 2022-01-22 18:01:34      B   5 #> 6  pigeon 2022-01-03 12:11:34      C   6 #>  #> $data$deployments #>   camera   lat   lon #> 1      A 20.12 33.44 #> 2      B 20.22 33.45 #> 3      C 22.34 33.42 #>  #>"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/create_dashboard.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a dashboard — create_dashboard","title":"Create a dashboard — create_dashboard","text":"Wrap tagList inside dashboard (used testing modules)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/create_dashboard.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a dashboard — create_dashboard","text":"","code":"create_dashboard(tagList, menu_title, dashboard_title = \"Camtrapviz\")"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/create_dashboard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a dashboard — create_dashboard","text":"tagList tagList menu_title title display tab menu dashboard_title Dashboard title","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/create_dashboard.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a dashboard — create_dashboard","text":"tagList wrapped dashboard","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter cameras in both tables — filter_cameras_in_both_tables","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"Filter data keep rows cameras tables","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"","code":"filter_cameras_in_both_tables(   records,   cameras,   cam_col_records,   cam_col_cameras = NULL )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"records Records dataframe cameras Cameras dataframe cam_col_records Name column cameras names records cam_col_cameras Name column cameras names cameras. NULL assumed cam_col_records.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"list two dataframes filtered values: $records records dataframe $cameras cameras dataframe","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"","code":"records <- data.frame(species = c(\"pigeon\", \"mouse\", \"pigeon\", \"mouse\"),                       stamp = Sys.time() + seq(60, length.out = 4, by = 60),                       camera = c(\"A\", \"B\", \"C\", \"E\")) cameras <- data.frame(camera = c(\"A\", \"B\", \"C\", \"D\"),                        lat = c(20.12, 20.22, 22.34, 21.35),                       lon = c(33.44, 33.45, 33.42, 33.53)) filter_cameras_in_both_tables(records, cameras,                                cam_col_records = \"camera\") #> $records #>   species               stamp camera #> 1  pigeon 2023-07-17 11:00:38      A #> 2   mouse 2023-07-17 11:01:38      B #> 3  pigeon 2023-07-17 11:02:38      C #>  #> $cameras #>   camera   lat   lon #> 1      A 20.12 33.44 #> 2      B 20.22 33.45 #> 3      C 22.34 33.42 #>"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colname.html","id":null,"dir":"Reference","previous_headings":"","what":"Find default colname — find_default_colname","title":"Find default colname — find_default_colname","text":"Finds column name matching given pattern among vector column names given argument.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find default colname — find_default_colname","text":"","code":"find_default_colname(   pattern,   colnames,   empty_allowed,   empty_placeholder = \"Not present in data\" )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colname.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find default colname — find_default_colname","text":"pattern regular expression look colnames colnames vector column names empty_allowed logical; allowed return character empty_placeholder match? empty_placeholder character use placeholder match pattern columns.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find default colname — find_default_colname","text":"least match: matched columns names match: empty_allowed, returns empty placeholder else, returns NULL","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colname.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find default colname — find_default_colname","text":"","code":"# There is a match camtrapviz:::find_default_colname(\"species\",                                   colnames = c(\"Species\", \"cameraID\", \"DateTime\"),                                   empty_allowed = TRUE) #> [1] \"Species\""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colnames.html","id":null,"dir":"Reference","previous_headings":"","what":"Find default column names — find_default_colnames","title":"Find default column names — find_default_colnames","text":"Finds column names default element regular expression list among column names given argument.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colnames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find default column names — find_default_colnames","text":"","code":"find_default_colnames(   regex_list,   colnames,   empty_allowed_list = list(),   empty_placeholder = \"Not present in data\" )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colnames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find default column names — find_default_colnames","text":"regex_list named list values regular expressions used search colnames names names empty_allowed_list. Shiny app, list's names widget names. colnames vector column names empty_allowed_list list vector containing names elements regex_list can return NULL match empty_placeholder character use placeholder match elements regex_list colnames.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colnames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find default column names — find_default_colnames","text":"list names regex_list. element first () matched column name corresponding regular expression regex_list. match one element: empty_allowed, returns empty placeholder else, returns NULL","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/find_default_colnames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find default column names — find_default_colnames","text":"","code":"colnames <- c(\"speciesName\", \"CameraID\", \"Datetime\") regex <- c(\"species\", \"station|deployment|camera\",            \"timestamp|datetime\") names(regex) <-  c(\"spp_col\", \"cam_col\", \"timestamp_col\") find_default_colnames(regex_list = regex,                       colnames = colnames) #> $spp_col #> [1] \"speciesName\" #>  #> $cam_col #> [1] \"CameraID\" #>  #> $timestamp_col #> [1] \"Datetime\" #>"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/fit_vonMises.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a von Mises distribution. — fit_vonMises","title":"Fit a von Mises distribution. — fit_vonMises","text":"Fit von Mises distribution.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/fit_vonMises.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a von Mises distribution. — fit_vonMises","text":"","code":"fit_vonMises(time, k)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/fit_vonMises.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a von Mises distribution. — fit_vonMises","text":"time time day (must object class times chron package) k Number mixture components (number modes final distribution)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/fit_vonMises.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a von Mises distribution. — fit_vonMises","text":"mixture model von Mises distributions class movMF.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/fit_vonMises.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a von Mises distribution. — fit_vonMises","text":"","code":"data(\"recordTableSample\", package = \"camtrapR\") recordTableSample <- recordTableSample[recordTableSample$Species == \"PBE\", ] recordTableSample$Time <- chron::times(recordTableSample$Time) fit_vonMises(recordTableSample$Time, k = 3) #> theta: #>           x          y #> 1  4.531003   7.250931 #> 2 35.928045  -2.528827 #> 3  2.094409 -11.833129 #> alpha: #> [1] 0.3393377 0.4383376 0.2223248 #> L: #> [1] 14.29919"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cameras — get_cameras","title":"Get cameras — get_cameras","text":"Get unique cameras present either one list .","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cameras — get_cameras","text":"","code":"get_cameras(cam1, cam2, NA.last = TRUE)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cameras — get_cameras","text":"cam1 Character vector camera names. cam2 Character vector camera names. NA.last Value NA.last argument unique sort functions","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cameras — get_cameras","text":"vector unique cameras present vectors. NAs kept placed last position. Alphabetical order used.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cameras — get_cameras","text":"","code":"cam1 <- c(\"C1\", \"C2\", \"C3\", NA) cam2 <- c(\"C2\", \"C3\", \"C4\") get_cameras(cam1, cam2) #> [1] \"C1\" \"C2\" \"C3\" \"C4\" NA"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cameras not in — get_cameras_not_in","title":"Get cameras not in — get_cameras_not_in","text":"Using two dataframes input, determine cameras one tables one.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cameras not in — get_cameras_not_in","text":"","code":"get_cameras_not_in(dfrecords, dfcameras, cam_col_records, cam_col_cameras)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cameras not in — get_cameras_not_in","text":"dfrecords records dataframe dfcameras cameras dataframe cam_col_records name cameras column records dataframe cam_col_cameras name cameras column cameras dataframe","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cameras not in — get_cameras_not_in","text":"named list two components $not_in_records: cameras dfcameras dfrecords. cameras dfcameras dfrecords, character vector length zero. $not_in_cameras: cameras dfrecords dfcameras cameras dfrecords dfcameras, character vector length zero.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cameras not in — get_cameras_not_in","text":"","code":"dfrecords <- data.frame(camID = letters[2:7]) dfcam <- data.frame(cameras = letters[1:5]) get_cameras_not_in(dfrecords = dfrecords,                     dfcameras = dfcam,                    cam_col_records = \"camID\",                    cam_col_cameras = \"cameras\") #> $not_in_records #> [1] \"a\" #>  #> $not_in_cameras #> [1] \"f\" \"g\" #>"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get diversity indices — get_diversity_indices","title":"Get diversity indices — get_diversity_indices","text":"summary table camera/species, return richness, Shannon Simpson diversity indices.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get diversity indices — get_diversity_indices","text":"","code":"get_diversity_indices(   count_df,   spp_col,   cam_col,   count_col = \"count\",   prop_col = \"prop\" )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get diversity indices — get_diversity_indices","text":"count_df Dataframe summarizing counts per species. Can computed using records dataframe get_diversity_table function. spp_col Name column containing species names cam_col Name column containing cameras names count_col Name column containing species counts prop_col Name column containing species proportions","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get diversity indices — get_diversity_indices","text":"dataframe one row per camera summarizing diversity indices.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get diversity indices — get_diversity_indices","text":"Richness computed number different species seen camera. Shannon index computed : $$-\\sum p_i ln(p_i)$$ p_i represents proportion abundance species camera total number individuals species seen camera. ranges 0 +infinity, zero indicating lowest diversity. Simpson index computed : $$(\\sum n_i (n_i - 1))/(N (N-1))$$ n_i represents abundance species camera total number individuals species seen camera. ranges 0 1, one indicating lowest diversity.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get diversity indices — get_diversity_indices","text":"","code":"countdf <- data.frame(camera = c(\"C1\", \"C1\", \"C1\", \"C2\",                                  \"C3\", \"C3\", \"C3\"),                       species = c(\"cat\", \"cow\", \"rabbit\",                                   \"cat\", \"cat\", \"cow\", \"rabbit\"),                       count = c(30, 30, 30, 30, 88, 1, 1),                       prop = c(1/3, 1/3, 1/3, 1, 88/90, 1/90, 1/90)) get_diversity_indices(countdf,                       spp_col = \"species\", cam_col = \"camera\") #>   camera richness   shannon   simpson #> 1     C1        3 1.0986123 0.3258427 #> 2     C2        1 0.0000000 1.0000000 #> 3     C3        3 0.1219692 0.9558052"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Get diversity table — get_diversity_table","title":"Get diversity table — get_diversity_table","text":"Compute table various diversity indices species occurrence dataframe.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get diversity table — get_diversity_table","text":"","code":"get_diversity_table(   df,   cam_col,   spp_col,   count_col = NULL,   keep_all_levels = TRUE )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get diversity table — get_diversity_table","text":"df dataframe cam_col Name column containing cameras names spp_col Name column containing species names count_col Name column containing species counts (optional) keep_all_levels keep camera levels even rows df? (Checked cam_col factor)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get diversity table — get_diversity_table","text":"dataframe one row per camera-species combination. camera-species, count (column count) proportion (column prop) individuals species seen camera.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get diversity table — get_diversity_table","text":"","code":"df <- data.frame(species = c(\"zebra\", \"cat\", \"cat\", \"cow\", \"cow\", NA, NA),                  type = c(\"animal\", \"animal\", \"animal\", \"animal\", \"animal\", \"human\", \"blank\"),                  camera = c(\"C1\", \"C1\", \"C1\", \"C1\", \"C2\", \"C2\", \"C3\"),                  count = c(1, 1, 1, 50, 3, 1, NA)) get_diversity_table(df,                     cam_col = \"camera\",                     spp_col = \"species\",                     count_col = \"count\") #>   camera species count       prop #> 1     C1     cat     2 0.03773585 #> 2     C1     cow    50 0.94339623 #> 3     C1   zebra     1 0.01886792 #> 4     C2     cow     3 0.75000000 #> 5     C2    <NA>     1 0.25000000 #> 6     C3    <NA>    NA         NA"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_example_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Get example mapping — get_example_mapping","title":"Get example mapping — get_example_mapping","text":"Returns vector mapping example datasets","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_example_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get example mapping — get_example_mapping","text":"","code":"get_example_mapping(df, col)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_example_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get example mapping — get_example_mapping","text":"df dataframe columns col widget col name column extract example mapping ","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_example_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get example mapping — get_example_mapping","text":"named character vector, excluding NA values col","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_named_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Get named vector — get_named_list","title":"Get named vector — get_named_list","text":"Get vector named values column \"widget\" dataframe","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_named_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get named vector — get_named_list","text":"","code":"get_named_list(df, col, widget_values)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_named_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get named vector — get_named_list","text":"df dataframe. Must column named widget column named like col. col column dataframe extract widget_values widgets get vector ","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_named_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get named vector — get_named_list","text":"named list containing values col, names widget names","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get species count — get_nspecies","title":"Get species count — get_nspecies","text":"Get species count","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get species count — get_nspecies","text":"","code":"get_nspecies(df, species_col, obs_col = NULL, keep_NA = FALSE)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get species count — get_nspecies","text":"df dataframe species_col name species column dataframe obs_col name observation type column dataframe keep_NA count NAs species length?","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get species count — get_nspecies","text":"number species. obs_col provided, ignore species obs_col value different animal. keep_NA, count NA total species count.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get species count — get_nspecies","text":"","code":"df <- data.frame(obstype = c(\"animal\", \"animal\", \"animal\", \"animal\", \"blank\"),                  species = c(\"cat\", \"cat\", \"cow\", \"dog\", NA)) get_nspecies(df, species_col = \"species\", obs_col = \"obstype\") #> [1] 3"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_separator.html","id":null,"dir":"Reference","previous_headings":"","what":"Get separator for a file — get_separator","title":"Get separator for a file — get_separator","text":"Detects separator one line file.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_separator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get separator for a file — get_separator","text":"","code":"get_separator(line, default = \",\")"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_separator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get separator for a file — get_separator","text":"line line file default default separator use case none work","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_separator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get separator for a file — get_separator","text":"detected separator (looks comma, semicolon tab)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique species from a dataframe — get_species","title":"Get unique species from a dataframe — get_species","text":"Get unique species dataframe","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique species from a dataframe — get_species","text":"","code":"get_species(   df,   spp_col,   obs_col = NULL,   animal_code = \"animal\",   return_df = TRUE )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique species from a dataframe — get_species","text":"df dataframe spp_col name species column dataframe obs_col name observation type column dataframe animal_code value obs_col coding animal observations. return_df renturn dataframe? TRUE, return dataframe (see ); else return character vector species names.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique species from a dataframe — get_species","text":"return_df TRUE, returns dataframe containing unique species characteristics. Else, returns character vector containing column spp_col dataframe. column named like spp_col containing unique species names. obs_col NULL: column named like obs_col containing corresponding observation type rownames table form ID_number unique ID species.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_species.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get unique species from a dataframe — get_species","text":"obs_col provided, values spp_col column NA obs_col corresponds non-animal species (case camtrapDP standard) replaced value obs_col.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get unique species from a dataframe — get_species","text":"","code":"df <- data.frame(species = c(\"rabbit\", \"cat\", \"cat\", NA, NA,                               \"cameratrapper\", \"tourist\"),                  type = c(\"animal\", \"animal\", \"animal\", \"fire\", \"blank\",                            \"human\", \"human\")) get_species(df, spp_col = \"species\", obs_col = \"type\") #>            species   type #> ID_1           cat animal #> ID_2        rabbit animal #> ID_3         blank  blank #> ID_4          fire   fire #> ID_5 cameratrapper  human #> ID_6       tourist  human"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/importApp.html","id":null,"dir":"Reference","previous_headings":"","what":"Run standalone import module — importApp","title":"Run standalone import module — importApp","text":"Run standalone import module","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/importApp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run standalone import module — importApp","text":"","code":"importApp(...)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/importApp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run standalone import module — importApp","text":"... Arguments pass shiny::shinyApp besides server ui","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/importApp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run standalone import module — importApp","text":"working Shiny app","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot map — plot_map","title":"Plot map — plot_map","text":"Plot leaflet map representing cameras' coordinates points.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot map — plot_map","text":"","code":"plot_map(   df,   lat_col,   lon_col,   popup = NULL,   display_camnames = FALSE,   crs = 4326,   width = NULL,   height = NULL,   cam_col,   color = \"black\",   radius = 3,   rescale = FALSE,   label = NULL )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot map — plot_map","text":"df dataframe containing cameras information lat_col Name latitude (projected y-coordinate) column lon_col Name longitude (projected y-coordinate) column popup vector characters display popup camera. must length number cameras df must ordered way cameras df. display_camnames Display camera names map? crs EPSG code coordinate reference system (CRS) Defaults EPSG:4326, code WGS84 standard. width Map width height Map height cam_col Name camera name column color color points (can unique value character vector, order rows df) radius named vector radii tu use cirles. Names correspond camera names. rescale rescale circles? TRUE, radii linearly resized maximum corresponds 300m, radii smaller 10 set 10m. label label display hovering map points","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot map — plot_map","text":"leaflet map representing cameras points. CRS input data different EPSG:4326 (WGS84), data re-projected using WGS84. hovering camera, becomes red name shown. clicking camera, popup displaying camera name appears.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot map — plot_map","text":"","code":"data(camtraps, package = \"camtrapR\") plot_map(camtraps,          lat_col = \"utm_y\",           lon_col = \"utm_x\",          crs = 32650, # Here we use the EPSG code for UTM zone 50N          cam_col = \"Station\")  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org\\\">OpenStreetMap<\\/a> contributors, <a href=\\\"https://creativecommons.org/licenses/by-sa/2.0/\\\">CC-BY-SA<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[5.46436552331582,5.482468354317958,5.491960550449553],[117.2347143299215,117.2076382765414,117.2256972583553],3,[\"StationA\",\"StationB\",\"StationC\"],null,{\"interactive\":true,\"className\":\"\",\"stroke\":false,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"black\",\"black\",\"black\"],\"fillOpacity\":0.8},null,null,[\"Camera: StationA\",\"Camera: StationB\",\"Camera: StationC\"],{\"maxWidth\":300,\"minWidth\":50,\"autoPan\":true,\"keepInView\":false,\"closeButton\":true,\"closeOnClick\":true,\"className\":\"\"},[\"StationA\",\"StationB\",\"StationC\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[5.46436552331582,5.491960550449553],\"lng\":[117.2076382765414,117.2347143299215]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot points — plot_points","title":"Plot points — plot_points","text":"Plot species occurrences cameras points","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot points — plot_points","text":"","code":"plot_points(   df,   camera_col,   timestamp_col,   date_col = NULL,   time_col = NULL,   cameras_list = NULL,   points_col = NULL,   caminfo = NULL,   caminfo_camera_col = camera_col,   caminfo_setup = \"setup\",   caminfo_retrieval = \"retrieval\",   interactive = FALSE,   textsize = 10,   ptsize = 1.5,   alpha_rect = 0.5,   col_rect = \"black\",   height_rect = 0.8,   fill_rect = NA,   xlab = \"Date\",   ylab = \"Camera\",   cols = \"black\" )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot points — plot_points","text":"df dataframe camera_col Name camera column timestamp_col Name timestamp column. datetime, must class POSIXct. can NULL date_col time_col provided. date_col Name date column. assumed class Date (else, results guaranteed). can NULL timestamp_col provided. time_col Name time column. assumed class times (else, results guaranteed). can NULL timestamp_col provided. cameras_list character vector cameras appeat plot (optional) points_col Name column use color data points (defaults species column). graph interactive, also displayed labels. interpred discrete color scale. caminfo Dataframe containing camera information. Must least one column camera ID, setup retrieval date. caminfo_camera_col Name camera column caminfo file. caminfo_setup Name setup column caminfo file. column must coercible POSIX (eg Date). caminfo_retrieval Name retrieval column caminfo file. column must coercible POSIX (eg Date). interactive Logical; make plot interactive ggiraph? textsize Base text size axis text (axes titles 1.2 times bigger) ptsize Size points plot alpha_rect transparency rectangle plotted sampling period (caminfo given) col_rect stroke color rectangle plotted sampling period (caminfo given) height_rect height rectangle plotted sampling period (caminfo given). height centered middle. 2 corresponds th space y-axis ticks entirely filled. fill_rect fill color rectangle plotted sampling period (caminfo given) xlab Label x-axis ylab Label y-axis cols Color palette points. Can either palette many colors levels points_col single color name. case cols vector can named values points_col correspont mapping colors points_col. Else mapping done alphabetical order.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot points — plot_points","text":"ggplot object representing time x-axis cameras y-axis. Colors points correspond different species.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot points — plot_points","text":"date_col time_col provided along timestamp_col, ignored.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot points — plot_points","text":"","code":"data(\"recordTableSample\", package = \"camtrapR\") recordTableSample$DateTimeOriginal <- as.POSIXct(recordTableSample$DateTimeOriginal) # Without camera samplking information plot_points(recordTableSample,              camera_col = \"Station\",              timestamp_col = \"DateTimeOriginal\")  # With camera sampling information data(\"camtraps\", package = \"camtrapR\") camtraps$Setup_date <- as.Date(camtraps$Setup_date,                                 format = \"%d/%m/%Y\")  camtraps$Retrieval_date <- as.Date(camtraps$Retrieval_date,                                     format = \"%d/%m/%Y\") plot_points(recordTableSample,              camera_col = \"Station\",              timestamp_col = \"DateTimeOriginal\",             caminfo = camtraps,             caminfo_setup = \"Setup_date\",             caminfo_retrieval = \"Retrieval_date\")"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot species bars — plot_species_bars","title":"Plot species bars — plot_species_bars","text":"Plot barplot species abundance","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot species bars — plot_species_bars","text":"","code":"plot_species_bars(   df,   spp_col,   count_col = NULL,   obs_col = NULL,   interactive = TRUE,   NA_count_placeholder = NA )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot species bars — plot_species_bars","text":"df dataframe spp_col Name species column count_col Name count column (optional). missing, assumed 1 observations. obs_col Name observation type column (optional). present, function plot observations obs_col \"animal\". interactive Logical; make plot interactive ggiraph? NA_count_placeholder Value replace NAs present column containing counts. specified, NA default species NA counts NA count.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot species bars — plot_species_bars","text":"ggplot object representing horizontal bars species count. x-axis observed number individuals y-axis different species.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot species bars — plot_species_bars","text":"","code":"data(\"recordTableSample\", package = \"camtrapR\") plot_species_bars(recordTableSample,                   spp_col = \"Species\")"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/prepare_cameras.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare cameras — prepare_cameras","title":"Prepare cameras — prepare_cameras","text":"Prepare camera data cleaning","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/prepare_cameras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare cameras — prepare_cameras","text":"","code":"prepare_cameras(   dat,   cam_columns = colnames(dat$data$deployments),   split = FALSE,   cam_col = \"deploymentID\" )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/prepare_cameras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare cameras — prepare_cameras","text":"dat data. can either list one component $data datapackage object (inheriting list). Either way, data $data slot two components: $deployments (cameras table) $observations (records table) cam_columns list columns names indicate relevant columns consider deployments data. missing, split = FALSE, default columns dat$data$deployments. Else, required. columns moved beginning cameras table (dat$data$deployments). split TRUE, names also extracted dat$data$observations create cameras table. split camera data extracted records? yes, cameras table created replace value dat$data$deployments. cam_col name camera column (know column keep dat$data$observations split = TRUE). Must cam_columns.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/prepare_cameras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare cameras — prepare_cameras","text":"dataset \"pre-cleaned\" cameras data: cameras table filtered keep unique rows across columns indicated cam_columns. allows filter instance duplicated cameras names. split TRUE, dat$data$deployments replaced data extracted dat$data$observations (columns indicated cam_columns) removes columns dat$data$observations (except cam_name)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/print_check_cameras.html","id":null,"dir":"Reference","previous_headings":"","what":"Print check cameras — print_check_cameras","title":"Print check cameras — print_check_cameras","text":"Display message say cameras absent records cameras dataframe.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/print_check_cameras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print check cameras — print_check_cameras","text":"","code":"print_check_cameras(cameras, type = c(\"not_in_records\", \"not_in_cameras\"))"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/print_check_cameras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print check cameras — print_check_cameras","text":"cameras character vector camera names type type message print: allowed values not_in_records not_in_cameras. Depending argument, sentence state input cameras records cameras dataframe.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/print_check_cameras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print check cameras — print_check_cameras","text":"message describing cameras missing . cameras missing (.e. cameras vector length zero), returns empty string \"\".","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data — read_data","title":"Read data — read_data","text":"Reads data file path (either csv json file), optionally another csv file (camera data).","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data — read_data","text":"","code":"read_data(   records_path,   sep_records,   cameras_path = NULL,   sep_cameras = NULL,   NA_strings = c(\"NA\", \"\") )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data — read_data","text":"records_path valid file path records. sep_records separator used records. cameras_path valid file path cameras (defaults NULL). sep_cameras separator used cameras (defaults NULL). NA_strings Vector characters considered NA import","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data — read_data","text":"list one component datapackage object. records_path json file, returns datapackage object (inheriting list). data $data slot, list 2 components: $deployments (cameras) $observations (records) records_path csv file, returns list one component named $data, list 2 components: $deployments (cameras: camera file provided cameras_path, NULL) $observations (records)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data — read_data","text":"","code":"if (FALSE) { # Read only records read_data(records_path = \"records.csv\", sep_records = \",\") # Read records and cameras read_data(records_path = \"records.csv\", sep_records = \",\",           cameras_path = \"cameras.csv\", sep_cameras = \",\") # Read a json file read_data(records_path = \"datapackage.json\") }"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove rows with NA — remove_rows_with_NA","title":"Remove rows with NA — remove_rows_with_NA","text":"Remove rows NA","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove rows with NA — remove_rows_with_NA","text":"","code":"remove_rows_with_NA(df, mapping)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove rows with NA — remove_rows_with_NA","text":"df dataframe remove NA mapping mapping list columns dataframe. Names column types. free, except species column observation type column, must coded respectively obs_col spp_col (exist). obs_col present names, spp_col assumed present . Values corresponding column names dataframe.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove rows with NA — remove_rows_with_NA","text":"filtered dataframe, rows mapping contain NA values. NA allowed spp_col obs_col mapping animal.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove rows with NA — remove_rows_with_NA","text":"","code":"df <- data.frame(species = c(\"pigeon\", \"mouse\", NA, \"pigeon\"),                   type = c(\"animal\", \"animal\", \"blank\", \"animal\"),                  stamp = Sys.time() + seq(60, length.out = 4, by = 60),                   camera = c(\"A\", \"B\", \"C\", NA)) mapping <- list(spp_col = \"species\",                 obs_col = \"type\",                 timestamp_col = \"stamp\",                 cam_col = \"camera\") remove_rows_with_NA(df, mapping) #>   species   type               stamp camera #> 1  pigeon animal 2023-07-17 11:00:43      A #> 2   mouse animal 2023-07-17 11:01:43      B #> 3    <NA>  blank 2023-07-17 11:02:43      C"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/reorder_named_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Reorder values — reorder_named_values","title":"Reorder values — reorder_named_values","text":"Reorder values","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/reorder_named_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reorder values — reorder_named_values","text":"","code":"reorder_named_values(vec, names, keep_all_names = TRUE)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/reorder_named_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reorder values — reorder_named_values","text":"vec named vector reorder names order names keep_all_names values names names vec, kept?","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/reorder_named_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reorder values — reorder_named_values","text":"reordered vector vec names names. values can NA keep_all_names TRUE.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/run_camtrapviz.html","id":null,"dir":"Reference","previous_headings":"","what":"Run camtrapviz — run_camtrapviz","title":"Run camtrapviz — run_camtrapviz","text":"Runs Shiny app vizualise camera trap data","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/run_camtrapviz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run camtrapviz — run_camtrapviz","text":"","code":"run_camtrapviz(...)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/run_camtrapviz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run camtrapviz — run_camtrapviz","text":"... Arguments pass shiny::shinyApp besides server ui","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/run_camtrapviz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run camtrapviz — run_camtrapviz","text":"working Shiny app","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/select_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Select values — select_values","title":"Select values — select_values","text":"Function create set widgets used select values based column based o values another column","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/select_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select values — select_values","text":"","code":"select_values(prefix, item)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/select_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select values — select_values","text":"prefix prefix use radioButtons select(ize)Input widgets item item name display widgets labels","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/select_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select values — select_values","text":"taglist widgets","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/separator_widget.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose separator — separator_widget","title":"Choose separator — separator_widget","text":"Function create widget choose column separator","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/separator_widget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose separator — separator_widget","text":"","code":"separator_widget(prefix)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/separator_widget.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose separator — separator_widget","text":"prefix prefix use widget id (\"prefix_sep\")","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/separator_widget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose separator — separator_widget","text":"checkboxGroupInput id \"prefix_sep\" choose comma, tabulation semicolon file separator","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server — server","title":"Server — server","text":"Server","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server — server","text":"","code":"server(input, output, session)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server — server","text":"input Shiny input output Shiny output session Shiny session","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Server — server","text":"server generating functions Shiny","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize cameras — summarize_cameras","title":"Summarize cameras — summarize_cameras","text":"Summarize information cameras activity camera trap data.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize cameras — summarize_cameras","text":"","code":"summarize_cameras(   df,   cam_col,   timestamp_col,   date_col = NULL,   time_col = NULL,   dfcam = NULL,   cam_col_dfcam = NULL,   setup_col = NULL,   retrieval_col = NULL )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize cameras — summarize_cameras","text":"df records dataframe: must contain camera names infortmation pictures sampling time (date time datetime). cam_col name column containing camera ID timestamp_col name column containing timestamps pictures (optional date_col time_col provided) date_col name column containing date (optional timestamp_col provided) time_col name column containing time (optional timestamp_col provided) dfcam dataframe cameras deployments (optional). cam_col_dfcam name column containing camera ID dfcam dfcam provided cam_col_dfcam NULL, set cam_col. setup_col name column containing setup date datetime dfcam (optional) retrieval_col name column containing retrieval date datetime dfcam (optional)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize cameras — summarize_cameras","text":"summary returned dataframe following columns: column named cam_col containing camera ID. setup containing start sampling camera. retrieval containing end sampling camera. setup_origin containing method used determine start sampling (picture setup) retrieval_origin containing method used determine end sampling (picture retrieval) sampling_length length sampling period days (computed cameraOperation function camtrapR package). setup retrieval NA, sampling_length NA setup retrieval (e.g. unique picture), sampling_length zero.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize cameras — summarize_cameras","text":"final dataframe, start end sampling computed follows camera: setup retrieval date provided dfcam, dates used start end sampling summary. cameras information provided, replaced date first last picture camera. information start end sampling computed stored setup_origin retrieval_origin. setup retrieval date provided via dfcam, setup_origin retrieval_origin metadata. else, columns contain picture. dfcam provided setup retrieval columns, cameras added columns except camera name NA. function uses cameraOperation function camtrapR package, camera names may contain Cam reserved name function.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize cameras — summarize_cameras","text":"","code":"# Create synthetic data records <- data.frame(species = c(\"pigeon\", \"mouse\", \"pigeon\", \"mouse\", \"mouse\"),                       stamp = as.POSIXct(c(\"2022-01-01 10:22:01\", \"2022-03-01 22:12:01\",                                            \"2022-01-02 11:54:33\", \"2022-01-12 07:14:38\",                                             \"2022-01-22 18:01:34\")),                       camera = c(\"A\", \"A\", \"B\", \"B\", \"B\")) cameras <- data.frame(camera = c(\"A\", \"B\", \"C\"),                       setup = as.Date(c(NA, \"2021-12-01\", \"2021-12-01\")),                       retrieval = as.Date(c(\"2022-03-01\", \"2022-03-01\", NA))) # Summarize cameras summarize_cameras(records,                    cam_col = \"camera\", timestamp_col = \"stamp\",                    dfcam = cameras,                    setup_col = \"setup\", retrieval_col = \"retrieval\") #> The legacy packages maptools, rgdal, and rgeos, underpinning the sp package, #> which was just loaded, will retire in October 2023. #> Please refer to R-spatial evolution reports for details, especially #> https://r-spatial.org/r/2023/05/15/evolution4.html. #> It may be desirable to make the sf package available; #> package maintainers should consider adding sf to Suggests:. #> The sp package is now running under evolution status 2 #>      (status 2 uses the sf package in place of rgdal) #> CTtable was converted from tibble to data.frame #>   camera               setup  retrieval setup_origin retrieval_origin #> 1      A 2022-01-01 10:22:01 2022-03-01      picture         metadata #> 2      B 2021-12-01 00:00:00 2022-03-01     metadata         metadata #> 3      C 2021-12-01 00:00:00       <NA>     metadata             <NA> #>   sampling_length #> 1          58.568 #> 2          90.000 #> 3              NA # Since camera A had no setup date, the first picture is used. # For camera B, setup and retrieval are taken from dfcam. # For camera C, as it is present only on dfcam and has no retrieval date, # only a setup date is indicated."},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize species — summarize_species","title":"Summarize species — summarize_species","text":"Summarize species information data table","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize species — summarize_species","text":"","code":"summarize_species(   df,   species_col,   cam_col = NULL,   obs_col = NULL,   count_col = NULL,   ncam = NULL,   NA_count_placeholder = NA )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize species — summarize_species","text":"df observation dataframe summarize species_col Name species column cam_col Name column containing camera codes (optional) obs_col Name observation type column (optional) count_col Name column containing species count (optional) ncam Number cameras take account computing proportion cameras species ween . NULL, defaults number cameras present df. NA_count_placeholder Value replace NAs present column containing counts. Defaults NA (.e. values replaced)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize species — summarize_species","text":"table summarizing species information following columns: Species (named like species_col): species identity (species_col input column) Observation type (present obs_col NULL named like obs_col): observation type (obs_col input column) n_sightings: number rows species photographed. n_individuals: count individuals observed pictures (using input count_col column). count_col NULL, contains values n_sightings. NAs input  count_col, propagate n_individuals (unless value specified NA_count_placeholder). n_cameras (present cam_col NULL) : number cameras species seen . prop_cam (present cam_col NULL): proportion cameras species seen . ncam provided, uses ncam total number cameras.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize species — summarize_species","text":"","code":"df <- data.frame(species = c(\"zebra\", \"cat\", \"cat\", \"cow\", NA, NA),                  type = c(\"animal\", \"animal\", \"animal\", \"animal\", \"human\", \"blank\"),                  camera = c(\"C1\", \"C1\", \"C2\", \"C3\", \"C3\", \"C4\"),                  count = c(1, 1, 3, 50, 1, NA)) res <- summarize_species(df,                           species_col = \"species\", cam_col = \"camera\",                          obs_col = \"type\",                          count_col = \"count\",                          NA_count_placeholder = 1)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/time_to_circular.html","id":null,"dir":"Reference","previous_headings":"","what":"Time to radians — time_to_circular","title":"Time to radians — time_to_circular","text":"Convert time day circular data.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/time_to_circular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time to radians — time_to_circular","text":"","code":"time_to_circular(time, units = c(\"radians\", \"hours\"), circular = FALSE)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/time_to_circular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time to radians — time_to_circular","text":"time time day (must object class times chron package) units unit use (subset values used circular::circular) circular Return object class circular?","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/time_to_circular.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time to radians — time_to_circular","text":"times converted desired unit. circular TRUE, returns object class circular.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/time_to_circular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time to radians — time_to_circular","text":"","code":"time_to_circular(chron::times(c(\"00:00:00\", \"12:00:00\", \"08:33:44\"))) #> [1] 0.000000 3.141593 2.241585"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/ui.html","id":null,"dir":"Reference","previous_headings":"","what":"UI-generating function — ui","title":"UI-generating function — ui","text":"UI-generating function","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UI-generating function — ui","text":"","code":"ui()"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UI-generating function — ui","text":"UI (HTML code)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/update_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Update map — update_map","title":"Update map — update_map","text":"Update leaflet map","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/update_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update map — update_map","text":"","code":"update_map(   map_id,   session,   df,   lat_col,   lon_col,   popup = NULL,   display_camnames = FALSE,   crs = 4326,   cam_col,   color = \"black\",   radius = 3,   rescale = FALSE,   label = NULL )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/update_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update map — update_map","text":"map_id ID map update session Shiny session df dataframe containing cameras information lat_col Name latitude (projected y-coordinate) column lon_col Name longitude (projected y-coordinate) column popup vector characters display popup camera. must length number cameras df must ordered way cameras df. display_camnames Display camera names map? crs EPSG code coordinate reference system (CRS) Defaults EPSG:4326, code WGS84 standard. cam_col Name camera name column color color points (can unique value character vector, order rows df) radius named vector radii tu use cirles. Names correspond camera names. rescale rescale circles? TRUE, radii linearly resized maximum corresponds 300m, radii smaller 10 set 10m. label label display hovering map points","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/update_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update map — update_map","text":"leaflet map representing cameras points. CRS input data different EPSG:4326 (WGS84), data re-projected using WGS84. hovering camera, becomes red name shown. clicking camera, popup displaying camera name appears.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/vonMises_density.html","id":null,"dir":"Reference","previous_headings":"","what":"von Mises density — vonMises_density","title":"von Mises density — vonMises_density","text":"Get density von Mises mixture model.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/vonMises_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"von Mises density — vonMises_density","text":"","code":"vonMises_density(   mod,   x = circular::circular(seq(0, 2 * pi, by = 0.01), units = \"radians\"),   unit = c(\"hour\", \"radians\") )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/vonMises_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"von Mises density — vonMises_density","text":"mod model x vector fit. Must type circular. unit Unit use return dataframe. Can either radians hours.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/vonMises_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"von Mises density — vonMises_density","text":"dataframe 2 columns: density: value density probability function x: corresponding value variable (using unit specified unit).","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/vonMises_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"von Mises density — vonMises_density","text":"","code":"data(\"recordTableSample\", package = \"camtrapR\") recordTableSample <- recordTableSample[recordTableSample$Species == \"PBE\", ] recordTableSample$Time <- chron::times(recordTableSample$Time) mod <- fit_vonMises(recordTableSample$Time, k = 3) dt <- vonMises_density(mod) # Visual check hist(as.numeric(recordTableSample$Time)*2*pi,       freq = FALSE, breaks = seq(0, 2*pi, by = pi/8)) lines(as.numeric(dt$x), dt$density, type = \"l\")"}]
