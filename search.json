[{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/activity-patterns.html","id":"import-and-prepare-data","dir":"Articles","previous_headings":"","what":"Import and prepare data","title":"Activity patterns","text":"also need coordinates want use solar time (run ): , need convert time radians (possibly solar time , .e. time radians times transformed relative sunrise sunset times). example, use species PBE example dataset.","code":"data(recordTableSample, package = \"camtrapR\")  # Convert hours to times format recordTableSample <- recordTableSample |>    mutate(Time = chron::times(Time))  # Convert dates to POSIX recordTableSample <- recordTableSample |>    mutate(DateTimeOriginal = as.POSIXct(DateTimeOriginal,                                        tz = \"Etc/GMT-8\")) # data(camtraps, package = \"camtrapR\") #  # camtraps_sf <- sf::st_as_sf(camtraps, #                             coords = c(\"utm_x\", \"utm_y\"), #                             crs = 32650) # # Reproject in WGS84 (a.k.a. EPSG:4326) # camtraps_sf <- sf::st_transform(camtraps_sf, 4326) #  # # Get coordinates of centroid # sf::st_combine(camtraps_sf) |> #   sf::st_centroid() |>  #   sf::st_coordinates(camtraps_sf) # #             X        Y # # [1,] 117.2227 5.479598 # Convert times to radians recordTableSample <- recordTableSample |>    mutate(time_radians = as.numeric(Time)*2*pi,          .after = Time)  solartime_rec <- solartime(recordTableSample$DateTimeOriginal,                            lon = 117.2227, # mean longitude                            lat = 5.479598, # mean latitude                            tz = 8)  recordTableSample <- recordTableSample |>    mutate(time_solar = solartime_rec$solar,           .after = Time) # Select the desired species PBE_records <- recordTableSample[recordTableSample$Species == \"PBE\", ]"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/activity-patterns.html","id":"plot-histogram-of-observed-data","dir":"Articles","previous_headings":"","what":"Plot histogram of observed data","title":"Activity patterns","text":"First, let’s plot observed data. default freq TRUE histogram bar height represents observed number individuals category.  Using interactive = TRUE, graph can also made interactive ggiraph. also possible plot density setting freq FALSE. case, bar area represents frequency individuals category. Hence, total area histogram 1. scale can also set radians.","code":"plot_activity(dfrec = PBE_records,               time_dfrec = \"Time\",               unit = \"clock\") p <- plot_activity(dfrec = PBE_records,                    time_dfrec = \"Time\",                    unit = \"clock\",                    interactive = TRUE) girafe(ggobj = p) p <- plot_activity(dfrec = PBE_records,                    time_dfrec = \"Time\",                    unit = \"clock\",                    freq = FALSE,                    interactive = TRUE) girafe(ggobj = p) p <- plot_activity(dfrec = PBE_records,                    time_dfrec = \"Time\",                    unit = \"radians\",                    freq = FALSE,                    interactive = TRUE) girafe(ggobj = p)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/activity-patterns.html","id":"infer-activity-patterns","dir":"Articles","previous_headings":"","what":"Infer activity patterns","title":"Activity patterns","text":"fit density function using activity package. , use function fitact adjusts density curve using von Mises functions kernel. function takes input least vector times (radians): object class actmod contains slots: @data (original data) @wt, @bw @adj (slots related model parameters) @pdf probability density function \\(x\\) \\([0; 2\\pi]\\) @act proportion time spent active (0 1)","code":"vm <- activity::fitact(PBE_records$time_radians) class(vm) #> [1] \"actmod\" #> attr(,\"package\") #> [1] \"activity\" getClass(\"actmod\") #> Class \"actmod\" [package \"activity\"] #>  #> Slots: #>                                                        #> Name:     data      wt      bw     adj     pdf     act #> Class: numeric numeric numeric numeric  matrix numeric"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/activity-patterns.html","id":"plot-density-curve","dir":"Articles","previous_headings":"","what":"Plot density curve","title":"Activity patterns","text":"plot density curve, need extract data frame corresponding probability density function actmod object.  Plotting predicted counts also possible. case, integral curve scaled hours (even scale radians) represents number observations.  also possible plot scale hours:","code":"pdf_vm <- as.data.frame(vm@pdf) plot_activity(dffit = pdf_vm,               time_dffit = \"x\",               y_fit = \"y\",               unit = \"radians\",               freq = FALSE) plot_activity(dffit = pdf_vm,               time_dffit = \"x\",               y_fit = \"y\",               unit = \"radians\",               freq = TRUE,               n = nrow(PBE_records)) plot_activity(dffit = pdf_vm,               time_dffit = \"x\",               y_fit = \"y\",               unit = \"clock\",               freq = TRUE,               n = nrow(PBE_records))"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/activity-patterns.html","id":"plot-density-curve-and-histogram","dir":"Articles","previous_headings":"","what":"Plot density curve and histogram","title":"Activity patterns","text":"also possible plot data density, combining various parameters illustrated (radians hours, frequency count…) example:","code":"p <- plot_activity(dffit = pdf_vm,                    time_dffit = \"x\",                    y_fit = \"y\",                    dfrec = PBE_records,                    time_dfrec = \"Time\",                    unit = \"clock\",                    freq = TRUE,                    interactive = TRUE) girafe(ggobj = p)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/activity-patterns.html","id":"infer-activity-patterns-with-sun-times","dir":"Articles","previous_headings":"","what":"Infer activity patterns with sun times","title":"Activity patterns","text":"can also use sun-adjusted times infer activity times:","code":"vm_sun <- activity::fitact(PBE_records$time_solar) pdf_vm_sum <- as.data.frame(vm_sun@pdf) p <- plot_activity(dffit = pdf_vm_sum,                    time_dffit = \"x\",                    y_fit = \"y\",                    dfrec = PBE_records,                    time_dfrec = \"Time\",                    unit = \"clock\",                    freq = TRUE,                    interactive = TRUE) girafe(ggobj = p)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/diversity.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import data","title":"Diversity analyses","text":"","code":"data(mica, package = \"camtraptor\") records <- mica$data$observations"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/diversity.html","id":"summarize-data","dir":"Articles","previous_headings":"","what":"Summarize data","title":"Diversity analyses","text":"compute diversity indices, need number proportion sightings species per camera. , use function summarize_species by_cam = TRUE:","code":"spp_cam <- summarize_species(records,                               spp_col = \"vernacularNames.en\",                               cam_col = \"deploymentID\",                              obstype_col = \"observationType\",                              count_col = \"count\",                              by_cam = TRUE,                              NA_count_placeholder = 1)  knitr::kable(spp_cam)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/diversity.html","id":"compute-diversity-indices","dir":"Articles","previous_headings":"","what":"Compute diversity indices","title":"Diversity analyses","text":", can compute diversity indices feeding summary dataframe get_diversity_indices function. Let \\(= 1 ... S\\) denote species \\(j = 1 ... C\\) denote cameras. \\(S_j\\) number species seen camera \\(j\\). \\(N_j\\) total number individuals species seen camera \\(j\\). \\(n_{ij}\\) \\(p_{ij}\\) represent respectively count proportion individuals species \\(\\) seen camera \\(j\\). function computes: richness \\(R_j = S_j\\) (number species seen camera \\(j\\)). Shannon index \\(H_j = -\\sum_{= 1}^{S_j} p_{ij} \\ln(p_{ij})\\). ranges 0 \\(+\\infty\\), zero indicating lowest diversity. Simpson index \\(D_j = \\sum_{ = 1}^{S_j} \\frac{n_{ij}(n_{ij} - 1) }{N_j(N_j - 1)}\\). ranges 0 1, one indicating lowest diversity. Optionally, can also provide name columns containing counts proportions (default name given summarize_species function).","code":"div <- get_diversity_indices(spp_cam,                              spp_col = \"vernacularNames.en\",                              cam_col = \"deploymentID\")  knitr::kable(div) div <- get_diversity_indices(spp_cam,                              spp_col = \"vernacularNames.en\",                              cam_col = \"deploymentID\",                              count_col = \"individuals\",                              prop_col = \"individuals_prop\")"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/diversity.html","id":"plot-diversity-indices","dir":"Articles","previous_headings":"","what":"Plot diversity indices","title":"Diversity analyses","text":"Although simple use diversity dataframe make custom plot, helper function plot_diversity provided. , plot richness.  plot can also made interactive. case want show cameras ones div dataframe, can use cam_vec argument. Finally, changing div_col argument can plot multiple diversity indices.","code":"plot_diversity(div,                 div_col = \"richness\",                 cam_col = \"deploymentID\") +   ggtitle(\"Species richness\") pr <- plot_diversity(div,                       div_col = \"richness\",                       cam_col = \"deploymentID\",                       interactive = TRUE) +   ggtitle(\"Species richness\")  girafe(ggobj = pr) div_less <- div[1:3, ] cameras <- unique(div$deploymentID)  # We deleted one camera unique(div_less$deploymentID) #> [1] \"29b7d356-4bb4-4ec4-b792-2af5cc32efa8\" #> [2] \"577b543a-2cf1-4b23-b6d2-cda7e2eac372\" #> [3] \"62c200a9-0e03-4495-bcd8-032944f6f5a1\"  # But it is still in cameras cameras #> [1] \"29b7d356-4bb4-4ec4-b792-2af5cc32efa8\" #> [2] \"577b543a-2cf1-4b23-b6d2-cda7e2eac372\" #> [3] \"62c200a9-0e03-4495-bcd8-032944f6f5a1\" #> [4] \"7ca633fa-64f8-4cfc-a628-6b0c419056d7\" pr <- plot_diversity(div_less,                       div_col = \"richness\",                       cam_col = \"deploymentID\",                       cam_vec = cameras,                      interactive = TRUE) +   ggtitle(\"Species richness\")  girafe(ggobj = pr) ph <- plot_diversity(div,                       div_col = \"shannon\",                       cam_col = \"deploymentID\",                       interactive = TRUE) +   ggtitle(\"Shannon diversity index\")  pd <- plot_diversity(div,                       div_col = \"simpson\",                       cam_col = \"deploymentID\",                       interactive = TRUE) +    ggtitle(\"Simpson diversity index\")  girafe(ggobj = ph) girafe(ggobj = pd)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/filter-data.html","id":"import-data","dir":"Articles","previous_headings":"","what":"Import data","title":"Filter data","text":"initial data:","code":"data(mica, package = \"camtraptor\") p <- plot_points(mica$data$observations,                  cam_col = \"deploymentID\",                  datetime_col = \"timestamp\",                  tooltip_info = \"vernacularNames.en\",                  interactive = TRUE) girafe(ggobj = p)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/filter-data.html","id":"filter-cameras","dir":"Articles","previous_headings":"","what":"Filter cameras","title":"Filter data","text":"can filter cameras (NB: also possible give single camera input). cameras list original files: cameras filtered observations deployments tables:","code":"# Original cameras in observations and  unique(mica$data$observations$deploymentID) #> [1] \"29b7d356-4bb4-4ec4-b792-2af5cc32efa8\" #> [2] \"577b543a-2cf1-4b23-b6d2-cda7e2eac372\" #> [3] \"62c200a9-0e03-4495-bcd8-032944f6f5a1\" #> [4] \"7ca633fa-64f8-4cfc-a628-6b0c419056d7\"  # Original cameras in deployments  unique(mica$data$deployments$deploymentID) #> [1] \"29b7d356-4bb4-4ec4-b792-2af5cc32efa8\" #> [2] \"577b543a-2cf1-4b23-b6d2-cda7e2eac372\" #> [3] \"62c200a9-0e03-4495-bcd8-032944f6f5a1\" #> [4] \"7ca633fa-64f8-4cfc-a628-6b0c419056d7\" cam_filter <- filter_data(mica,                            cam_col_rec = \"deploymentID\",                            cam_filter = c(\"29b7d356-4bb4-4ec4-b792-2af5cc32efa8\", \"577b543a-2cf1-4b23-b6d2-cda7e2eac372\")) unique(cam_filter$data$observations$deploymentID) #> [1] \"62c200a9-0e03-4495-bcd8-032944f6f5a1\" #> [2] \"7ca633fa-64f8-4cfc-a628-6b0c419056d7\"  unique(cam_filter$data$deployments$deploymentID) #> [1] \"62c200a9-0e03-4495-bcd8-032944f6f5a1\" #> [2] \"7ca633fa-64f8-4cfc-a628-6b0c419056d7\" plot_points(cam_filter$data$observations,             cam_col = \"deploymentID\",             datetime_col = \"timestamp\")"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/filter-data.html","id":"filter-species","dir":"Articles","previous_headings":"","what":"Filter species","title":"Filter data","text":"can filter species (removing one several species): initial species list: data cleaning, great herons removed.","code":"unique(mica$data$observations$vernacularNames.en) #>  [1] NA                 \"gadwall\"          \"mallard\"          \"Eurasian beaver\"  #>  [5] \"European polecat\" \"red fox\"          \"beech marten\"     \"grey heron\"       #>  [9] \"great herons\"     \"human\" spp_filter <- filter_data(mica,                            spp_col = \"vernacularNames.en\",                            spp_filter = \"great herons\") unique(spp_filter$data$observations$vernacularNames.en)  #> [1] NA                 \"gadwall\"          \"mallard\"          \"Eurasian beaver\"  #> [5] \"European polecat\" \"red fox\"          \"beech marten\"     \"grey heron\"       #> [9] \"human\""},{"path":"https://lisanicvert.github.io/camtrapviz/articles/filter-data.html","id":"filter-observation-type","dir":"Articles","previous_headings":"","what":"Filter observation type","title":"Filter data","text":"can filter observation type. can useful instance want keep animals (unidentifiable, humans…). initial values observation types: Let’s filter categories except animal: observation type remaining data cleaning animal.","code":"obstype <- mica$data$observations$observationType unique(obstype) #> [1] unknown      blank        animal       unclassified human        #> Levels: animal human vehicle blank unknown unclassified # Define the types we want to remove obs_out <- unique(obstype[obstype != \"animal\"]) obs_out #> [1] unknown      blank        unclassified human        #> Levels: animal human vehicle blank unknown unclassified  obstype_filter <- filter_data(mica,                            obstype_col = \"observationType\",                            obstype_filter = obs_out) unique(obstype_filter$data$observations$observationType) #> [1] animal #> Levels: animal human vehicle blank unknown unclassified"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/filter-data.html","id":"filter-dates","dir":"Articles","previous_headings":"","what":"Filter dates","title":"Filter data","text":"also possible specify date bounds data. original date range: Let’s filter subset data January, 1st 2020 January, 1st 2021. visualize filter plot: solid lines old data bounds dashed lines represent new date range.  Let’s filter data. daterange argument can also Date POSIX: new data range comprised within specified bounds (January, 1st 2020 January, 1st 2021). also possible filter data date times two columns. First, create dataset two columns: filter dates data. new data range .","code":"# Original date range (old_range <- range(mica$data$observations$timestamp)) #> [1] \"2019-10-09 13:18:07 UTC\" \"2021-04-18 21:24:42 UTC\" new_range <- c(\"2020-01-01\", \"2021-01-01\") plot_points(mica$data$observations,              cam_col = \"deploymentID\",             datetime_col = \"timestamp\") +   ggplot2::geom_vline(xintercept = as.POSIXct(new_range,                                                tz = \"UTC\"),                       linetype = \"dashed\") +   ggplot2::geom_vline(xintercept = old_range) date_filter <- filter_data(mica,                             datetime_col = \"timestamp\",                             daterange = new_range) (new_range_date <- as.Date(new_range)) #> [1] \"2020-01-01\" \"2021-01-01\" date_filter <- filter_data(mica,                             datetime_col = \"timestamp\",                             daterange = new_range_date)  (new_range_posix <- as.POSIXct(new_range)) #> [1] \"2020-01-01 UTC\" \"2021-01-01 UTC\" date_filter <- filter_data(mica,                             datetime_col = \"timestamp\",                             daterange = new_range_posix) # The new range is restricted range(date_filter$data$observations$timestamp) #> [1] \"2020-06-19 21:00:00 UTC\" \"2020-08-08 04:20:35 UTC\" mica_date_time <- mica  mica_date_time$data$observations <- mica_date_time$data$observations |>    dplyr::mutate(date = format(timestamp, \"%F\"),                 time = format(timestamp, \"%T\"),                 .after = \"timestamp\")  mica_date_time$data$observations |>    dplyr::select(timestamp, date, time) |>    head() #> # A tibble: 6 × 3 #>   timestamp           date       time     #>   <dttm>              <chr>      <chr>    #> 1 2020-07-29 05:29:41 2020-07-29 05:29:41 #> 2 2020-07-29 05:38:55 2020-07-29 05:38:55 #> 3 2020-07-29 05:46:48 2020-07-29 05:46:48 #> 4 2020-07-30 04:29:31 2020-07-30 04:29:31 #> 5 2020-07-31 04:43:33 2020-07-31 04:43:33 #> 6 2020-08-02 05:00:14 2020-08-02 05:00:14 date_filter <- filter_data(mica_date_time,                             date_col = \"date\",                            time_col = \"time\",                             daterange = new_range) range(date_filter$data$observations$timestamp) #> [1] \"2020-06-19 21:00:00 UTC\" \"2020-08-08 04:20:35 UTC\""},{"path":"https://lisanicvert.github.io/camtrapviz/articles/filter-data.html","id":"combine-filters","dir":"Articles","previous_headings":"","what":"Combine filters","title":"Filter data","text":"Finally, possible combine multiple conditions customize data filtering: Let’s check filtering:","code":"custom_filter <- filter_data(mica,                              cam_filter = \"29b7d356-4bb4-4ec4-b792-2af5cc32efa8\",                              cam_col_rec = \"deploymentID\",                              spp_filter = c(\"great herons\", \"grey heron\"),                              spp_col = \"vernacularNames.en\",                              datetime_col = \"timestamp\",                              daterange = c(\"2020-01-01\", \"2021-04-18\")) # Full dataset unique(mica$data$observations$deploymentID) #> [1] \"29b7d356-4bb4-4ec4-b792-2af5cc32efa8\" #> [2] \"577b543a-2cf1-4b23-b6d2-cda7e2eac372\" #> [3] \"62c200a9-0e03-4495-bcd8-032944f6f5a1\" #> [4] \"7ca633fa-64f8-4cfc-a628-6b0c419056d7\" # Filtered dataset unique(custom_filter$data$observations$deploymentID) #> [1] \"577b543a-2cf1-4b23-b6d2-cda7e2eac372\" #> [2] \"62c200a9-0e03-4495-bcd8-032944f6f5a1\"  # Full dataset unique(mica$data$observations$vernacularNames.en) #>  [1] NA                 \"gadwall\"          \"mallard\"          \"Eurasian beaver\"  #>  [5] \"European polecat\" \"red fox\"          \"beech marten\"     \"grey heron\"       #>  [9] \"great herons\"     \"human\" # Filtered dataset unique(custom_filter$data$observations$vernacularNames.en) #> [1] NA                 \"Eurasian beaver\"  \"European polecat\" \"red fox\"          #> [5] \"beech marten\"  # Full dataset range(mica$data$observations$timestamp) #> [1] \"2019-10-09 13:18:07 UTC\" \"2021-04-18 21:24:42 UTC\" # Filtered dataset range(custom_filter$data$observations$timestamp) #> [1] \"2020-06-19 21:00:00 UTC\" \"2021-03-31 22:59:15 UTC\""},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"import-and-prepare-data","dir":"Articles","previous_headings":"","what":"Import and prepare data","title":"Plots","text":"","code":"data(recordTableSample, package = \"camtrapR\") data(camtraps, package = \"camtrapR\") recordTableSample$DateTimeOriginal <- as.POSIXct(recordTableSample$DateTimeOriginal) recordTableSample$Date <- as.Date(recordTableSample$Date) recordTableSample$Time <- chron::times(recordTableSample$Time)  camtraps$Setup_date <- as.Date(camtraps$Setup_date, format = \"%d/%m/%Y\") camtraps$Retrieval_date <- as.Date(camtraps$Retrieval_date, format = \"%d/%m/%Y\")"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"plot-observations","dir":"Articles","previous_headings":"","what":"Plot observations","title":"Plots","text":"package provides function plot observations camera.  case camera data observations made, can provide vector cameras show graph:  date_col time_col can also used instead datetime_col.  also possible provide column points colors:  providing additional info, also possible visualize sampling period graph.  Various options available customize graph:  Using ggiraph, plot can also made interactive:","code":"plot_points(recordTableSample,             cam_col = \"Station\",             datetime_col = \"DateTimeOriginal\") all_cam <- c(\"StationA\", \"StationB\", \"StationC\", \"StationD\") plot_points(recordTableSample,             cam_col = \"Station\",             datetime_col = \"DateTimeOriginal\",             cam_vec = all_cam) plot_points(recordTableSample,             cam_col = \"Station\",             date_col = \"Date\",              time_col = \"Time\") plot_points(recordTableSample,             cam_col = \"Station\",             points_col = \"Species\",             datetime_col = \"DateTimeOriginal\") plot_points(recordTableSample,              cam_col = \"Station\",              points_col = \"Species\",             datetime_col = \"DateTimeOriginal\",             dfcam = camtraps,             setup_dfcam = \"Setup_date\",             retrieval_dfcam = \"Retrieval_date\") spp <- unique(recordTableSample$Species) pal <- RColorBrewer::brewer.pal(length(spp), \"Purples\")  plot_points(recordTableSample,              cam_col = \"Station\",              points_col = \"Species\",             datetime_col = \"DateTimeOriginal\",             dfcam = camtraps,             setup_dfcam = \"Setup_date\",             retrieval_dfcam = \"Retrieval_date\",             fill_rect = \"darkgoldenrod1\",             alpha_rect = 0.6,             col_rect = NA,              height_rect = 0.5,             ptsize = 3,             date_breaks = \"1 month\",             date_limits = as.POSIXct(c(\"2009-02-01\",                                        \"2009-06-01\"),                                      tz = \"UTC\"),             date_format = \"%a %d %B\",             text_x_angle = 45,             cols = pal) p <- plot_points(recordTableSample,                   cam_col = \"Station\",                   points_col = \"Species\",                  datetime_col = \"DateTimeOriginal\",                  dfcam = camtraps,                  setup_dfcam = \"Setup_date\",                  retrieval_dfcam = \"Retrieval_date\",                  interactive = TRUE) ggiraph::girafe(ggobj = p)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"plot-cameras","dir":"Articles","previous_headings":"","what":"Plot cameras","title":"Plots","text":"package also provides function plot cameras Leaflet. , dataset already projected using UTM zone 50 (East Asia)/ Therefore, provide EPSG code use (EPSG:32650). also possible display cameras names: Additional information can also displayed using radius camera points. , choose make circles sizes proportional abundance one species camera: data missing, show purple map.","code":"plot_map(camtraps,           cam_col = \"Station\",          lat_col = \"utm_y\", lon_col = \"utm_x\",           crs = 32650) plot_map(camtraps,           cam_col = \"Station\",          lat_col = \"utm_y\", lon_col = \"utm_x\",           display_camnames = TRUE,          crs = 32650) # Get abundance per camera PBE_abundance <- recordTableSample |>    filter(Species == \"PBE\") |>    group_by(Station) |>    summarise(count = n()) radius <- PBE_abundance$count names(radius) <- PBE_abundance$Station  radius #> StationA StationB StationC  #>        4        8        6 plot_map(camtraps,           cam_col = \"Station\",          lat_col = \"utm_y\", lon_col = \"utm_x\",           radius = radius,          label = paste(\"Camera:\", names(radius),                         \"| abundance:\", radius),          crs = 32650) radius_missing <- radius[1:2]  plot_map(camtraps,           cam_col = \"Station\",          lat_col = \"utm_y\", lon_col = \"utm_x\",           radius = radius_missing,          label = paste(\"Camera:\", names(radius_missing),                         \"| abundance:\", radius_missing),          crs = 32650)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"plot-species","dir":"Articles","previous_headings":"","what":"Plot species","title":"Plots","text":"package also includes simple function plot species counts.  count column, can also included.  observation type column, NA values species column replaced values observation type. primarily intended camtrapDP standard, non-animal observations NA species column. , add observation type column data replace species NA.  Finally, plot can also made interactive using ggiraph:","code":"plot_species_bars(recordTableSample,                    spp_col = \"Species\") with_count <- recordTableSample |>    mutate(count = 2)  plot_species_bars(with_count,                    spp_col = \"Species\", count_col = \"count\") with_obstype <- recordTableSample |>    mutate(type = ifelse(Species == \"PBE\", \"blank\", \"animal\"),           .after = Species) |>    mutate(Species = ifelse(Species == \"PBE\", NA, Species)) with_obstype |>    select(Station, Species, type) |>    head() #>    Station Species   type #> 1 StationA    <NA>  blank #> 2 StationA    <NA>  blank #> 3 StationA    <NA>  blank #> 4 StationA    <NA>  blank #> 5 StationA     VTA animal #> 6 StationA     VTA animal plot_species_bars(with_obstype,                    spp_col = \"Species\",                    obstype_col = \"type\") p <- plot_species_bars(recordTableSample,                         spp_col = \"Species\",                        interactive = TRUE) girafe(ggobj = p)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"plot-activity","dir":"Articles","previous_headings":"","what":"Plot activity","title":"Plots","text":"also possible explore activity times given species: Another vignette gives -depth overview type plots (see ).","code":"# Get records corresponding only to PBE PBE_records <- recordTableSample |>    filter(Species == \"PBE\")  p <- plot_activity(dfrec = PBE_records,                    time_dfrec = \"Time\",                    unit = \"clock\",                    interactive = TRUE) girafe(ggobj = p)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/plots.html","id":"plot-diversity","dir":"Articles","previous_headings":"","what":"Plot diversity","title":"Plots","text":"also possible plot diversity indices: Another vignette gives -depth overview type plots (see ).","code":"# Get diversity spp_cam <- summarize_species(recordTableSample,                               spp_col = \"Species\",                               cam_col = \"Station\",                              by_cam = TRUE)  div <- get_diversity_indices(spp_cam,                              spp_col = \"Species\",                              cam_col = \"Station\") p <- plot_diversity(div,                      div_col = \"simpson\",                      cam_col = \"Station\",                      interactive = TRUE) +    ggtitle(\"Simpson diversity index\") girafe(ggobj = p)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"write-data-in-tempfile","dir":"Articles","previous_headings":"","what":"Write data in tempfile","title":"Read and clean data","text":"","code":"# records and cameras in separate files ------------------------------------------ data(recordTableSample, package = \"camtrapR\") data(camtraps, package = \"camtrapR\")  # Create subfolder dir.create(paste0(tempdir(), \"/csv\"))  # Write files recordfile <- paste0(tempdir(), \"/csv/records.csv\") camtrapfile <- paste0(tempdir(), \"/csv/camtraps.csv\")  write.csv(recordTableSample, recordfile,            row.names = FALSE) write.csv(camtraps, camtrapfile,            row.names = FALSE) # records and cameras in same file ------------------------------------------ # Create file recordcam <- recordTableSample |>   dplyr::left_join(camtraps, by = \"Station\")  # Create subfolder dir.create(paste0(tempdir(), \"/csvcam\"))  # Write file recordcamfile <- paste0(tempdir(), \"/csvcam/recordcam.csv\") write.csv(recordcam, recordcamfile,            row.names = FALSE)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"records-and-cameras-in-separate-csv-files","dir":"Articles","previous_headings":"","what":"Records and cameras in separate csv files","title":"Read and clean data","text":"First, see data import cleaning performed two csv files (records cameras):","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"read-data","dir":"Articles","previous_headings":"Records and cameras in separate csv files","what":"Read data","title":"Read and clean data","text":"imported file list one component $data containing 2 dataframes: $observations contains records $deployments contains cameras information","code":"dat <- read_data(path_rec = recordfile,                  path_cam = camtrapfile,                  sep_rec = \",\", sep_cam = \",\") head(dat$data$observations) |>    knitr::kable() head(dat$data$deployments) |>    knitr::kable()"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"clean-data","dir":"Articles","previous_headings":"Records and cameras in separate csv files","what":"Clean data","title":"Read and clean data","text":"step ensures columns desired type. also move columns beginning table. cast data appropriate type, function two arguments, created : rec_type (records table) cam_type (cameras table). lists contain information convert column types. Values contain casting function apply (e.g. \".Date\" translate .Date(x)). Values cal also lists provide additional arguments: instance, list(\".Date\", format = \"%d/%m/%Y\") translate .Date(x,  format = \"%d/%m/%Y\"). names list give corresponding column data casted. case cameras records cameras file match, clean_data option allowing keep shared cameras. create new dataset observations table Stations , B C deployments table stations B, C D: Cleaning data keep data cameras common two datasets (B C);","code":"rec_type <- list(Station = \"as.character\",                  Date = list(\"as_date\",                              format = \"%Y-%m-%d\"),                  Time = \"times\",                  DateTimeOriginal = list(\"as.POSIXct\",                                          tz = \"Etc/GMT-8\"))  cam_type <- list(Station = \"as.character\",                  Setup_date = list(\"as.Date\",                                    format = \"%d/%m/%Y\"),                   Retrieval_date = list(\"as.Date\",                                        format = \"%d/%m/%Y\")) dat_clean <- clean_data(dat,                          rec_type = rec_type,                         cam_type = cam_type) head(dat_clean$data$observations) |>    knitr::kable() head(dat_clean$data$deployments) |>    knitr::kable() # Initialize new data dat_diffcam <- dat  # Replace a camera in deployments newcam <- dat_diffcam$data$deployments[1, ] newcam$Station <- \"StationD\"  dat_diffcam$data$deployments <- dat_diffcam$data$deployments |>    filter(Station != \"StationA\") |>    bind_rows(newcam)  unique(dat_diffcam$data$observations$Station) #> [1] \"StationA\" \"StationB\" \"StationC\" unique(dat_diffcam$data$deployments$Station) #> [1] \"StationB\" \"StationC\" \"StationD\" dat_diffcam_clean <- clean_data(dat_diffcam,                                  rec_type = rec_type,                                 cam_type = cam_type,                                 cam_col_dfrec = \"Station\",                                 cam_col_dfcam = \"Station\",                                  only_shared_cam = TRUE)  unique(dat_diffcam_clean$data$observations$Station) #> [1] \"StationB\" \"StationC\" unique(dat_diffcam_clean$data$deployments$Station) #> [1] \"StationB\" \"StationC\""},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"records-and-cameras-in-the-same-csv-1-csv-file","dir":"Articles","previous_headings":"","what":"Records and cameras in the same csv (1 csv file)","title":"Read and clean data","text":", see data import cleaning performed unique csv file containing records cameras information:","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"read-data-1","dir":"Articles","previous_headings":"Records and cameras in the same csv (1 csv file)","what":"Read data","title":"Read and clean data","text":"imported file list one component $data: $data$observations contains cameras records information $data$deployments NULL (one file imported)","code":"dat <- read_data(path_rec = recordcamfile,                  sep_rec = \",\") head(dat$data$observations) |>    knitr::kable() head(dat$data$deployments) |>    knitr::kable()"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"clean-data-1","dir":"Articles","previous_headings":"Records and cameras in the same csv (1 csv file)","what":"Clean data","title":"Read and clean data","text":"step, split information observations table observations deployments. , clean_data move columns listed cam_cols deployments table. column containing cameras IDs must specified cam_col_dfrec argument (column kept observations table). Since beginning, columns observations dataframe, casting specifications rec_type argument.","code":"cam_cols <- c(\"Station\", \"Setup_date\", \"Retrieval_date\",                \"utm_y\", \"utm_x\", \"Problem1_from\", \"Problem1_to\")  rec_type2 <- list(Station = \"as.character\",                   Date = list(\"as_date\",                              format = \"%Y-%m-%d\"),                   Time = \"times\",                   DateTimeOriginal = list(\"as.POSIXct\",                                          tz = \"Etc/GMT-8\"),                   Setup_date = list(\"as.Date\",                                     format = \"%d/%m/%Y\"),                    Retrieval_date = list(\"as.Date\",                                         format = \"%d/%m/%Y\"),                   Problem1_from = list(\"as.Date\",                                        format = \"%d/%m/%Y\"),                   Problem1_to = list(\"as.Date\",                                      format = \"%d/%m/%Y\")) dat_clean <- clean_data(dat,                          rec_type = rec_type2,                         cam_col_dfrec = \"Station\",                         cam_cols = cam_cols,                         split = TRUE) head(dat_clean$data$observations) |>    knitr::kable() head(dat_clean$data$deployments) |>    knitr::kable()"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"camtrapdp-format-json-file","dir":"Articles","previous_headings":"","what":"CamtrapDP format (json file)","title":"Read and clean data","text":", see data import cleaning performed dataset camtrapDP format.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"read-data-2","dir":"Articles","previous_headings":"CamtrapDP format (json file)","what":"Read data","title":"Read and clean data","text":"read_data function can also read json files corresponding camtrapDP datapackage. Internally, use function read_camtrap_dp camtraptor package (, give result use use directly function). imported object list several slots, observations deployments info $data slot.","code":"camtrap_dp_file <- system.file(   \"extdata\", \"mica\", \"datapackage.json\",    package = \"camtraptor\" ) dat <- read_data(path_rec = camtrap_dp_file)  # dat <- read_data(path_rec = \"https://raw.githubusercontent.com/tdwg/camtrap-dp/main/example/datapackage.json\") class(dat) #> [1] \"datapackage\" \"list\" names(dat) #>  [1] \"name\"          \"id\"            \"profile\"       \"created\"       #>  [5] \"sources\"       \"contributors\"  \"organizations\" \"project\"       #>  [9] \"spatial\"       \"temporal\"      \"taxonomic\"     \"platform\"      #> [13] \"resources\"     \"directory\"     \"data\"  head(dat$data$observations) |>    knitr::kable() head(dat$data$deployments) |>    knitr::kable()"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/read-and-clean-data.html","id":"clean-data-2","dir":"Articles","previous_headings":"CamtrapDP format (json file)","what":"Clean data","title":"Read and clean data","text":", data follows camtrapDP standard need cleaning. However, demonstration change time stamp type character: cleaned data, timestamp converted back POSIX: timezone UTC, specified casting function: Else, data unchanged.","code":"dat$data$observations$timestamp <- as.character(dat$data$observations$timestamp)  class(dat$data$observations$timestamp) #> [1] \"character\" rec_type <- list(timestamp = list(\"as.POSIXct\",                                   tz = \"UTC\"))  dat_clean <- clean_data(dat,                          rec_type = rec_type) class(dat_clean$data$observations$timestamp) #> [1] \"POSIXct\" \"POSIXt\" attr(dat_clean$data$observations$timestamp, \"tzone\") #> [1] \"UTC\" head(dat_clean$data$observations) |>    knitr::kable() head(dat_clean$data$deployments) |>    knitr::kable()"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/summarize.html","id":"import-and-prepare-data","dir":"Articles","previous_headings":"","what":"Import and prepare data","title":"Summarize data","text":"","code":"data(recordTableSample, package = \"camtrapR\") data(camtraps, package = \"camtrapR\") recordTableSample$DateTimeOriginal <- as.POSIXct(recordTableSample$DateTimeOriginal) recordTableSample$Date <- as.Date(recordTableSample$Date) recordTableSample$Time <- chron::times(recordTableSample$Time)  camtraps$Setup_date <- as.Date(camtraps$Setup_date, format = \"%d/%m/%Y\") camtraps$Retrieval_date <- as.Date(camtraps$Retrieval_date, format = \"%d/%m/%Y\")"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/summarize.html","id":"camera-information","dir":"Articles","previous_headings":"","what":"Camera information","title":"Summarize data","text":"can summarize camera sampling function summarize_cameras. start end dates taken data sampling length computed using cameraOperation matrix camtrapR package. provide observation dataframe, sampling computed first last picture. summary table following columns: first column named cameras ID column (Station) contains cameras ID. pictures number pictures caught camera. sampling_length length sampling period days (computed cameraOperation function camtrapR package). setup contains start sampling camera. retrieval contains end sampling camera. setup_origin containing method used determine start sampling (possible values picture setup). retrieval_origin containing method used determine end sampling (picture setup). add species column spp_col argument, column species added summary (contains number species caught camera). provide cameras dataframe, whenever possible sampling information obtained setup retrieval columns. information missing camera dataframe, information observations used.","code":"camsum <- summarize_cameras(recordTableSample,                             cam_col = \"Station\",                             date_col = \"Date\",                             time_col = \"Time\") knitr::kable(camsum) camsum <- summarize_cameras(recordTableSample,                             cam_col = \"Station\",                             date_col = \"Date\",                             time_col = \"Time\",                             spp_col = \"Species\") knitr::kable(camsum) camsum <- summarize_cameras(recordTableSample,                             cam_col = \"Station\",                             date_col = \"Date\",                             time_col = \"Time\",                             spp_col = \"Species\",                             dfcam = camtraps,                              cam_col_dfcam = \"Station\",                              setup_col = \"Setup_date\",                             retrieval_col = \"Retrieval_date\") knitr::kable(camsum) cam_missing <- camtraps cam_missing$Retrieval_date[cam_missing$Station == \"StationA\"] <- NA  knitr::kable(cam_missing |>                 select(Station, Setup_date, Retrieval_date)) camsum <- summarize_cameras(recordTableSample,                             cam_col = \"Station\",                             date_col = \"Date\",                             time_col = \"Time\",                             spp_col = \"Species\",                             dfcam = cam_missing,                              cam_col_dfcam = \"Station\",                              setup_col = \"Setup_date\",                             retrieval_col = \"Retrieval_date\") knitr::kable(camsum)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/summarize.html","id":"species-information","dir":"Articles","previous_headings":"","what":"Species information","title":"Summarize data","text":"can also summarize species sightings function summarize_species. summary table following columns: first column named species column (Species) contains species name sightings number sightings species (corresponding row count data) individuals takes account information counting column (provided). Else, sightings. n_cameras gives number cameras species observed . prop_cam gives proportion cameras species observed . can also include count information: count data NA, possible provide value replace : obstype_col included, final table one column describing type values summarized species_col obstype_col.","code":"sppsum <- summarize_species(recordTableSample,                             spp_col = \"Species\",                              cam_col = \"Station\") knitr::kable(sppsum) with_count <- recordTableSample |>    mutate(count = 3) sppsum <- summarize_species(with_count,                             spp_col = \"Species\",                              cam_col = \"Station\",                              count_col = \"count\") knitr::kable(sppsum) with_count_NA <- with_count |>    mutate(count = ifelse(Species == \"PBE\", NA, count))  sppsum <- summarize_species(with_count_NA,                             spp_col = \"Species\",                              cam_col = \"Station\",                              count_col = \"count\",                             NA_count_placeholder = 1)  knitr::kable(sppsum) with_obstype <- recordTableSample |>    mutate(type = \"animal\") with_obstype <- rbind(with_obstype,                       c(rep(NA, 11), \"human\")) with_obstype <- rbind(with_obstype,                       c(rep(NA, 11), \"fire\"))  sppsum <- summarize_species(with_obstype,                             spp_col = \"Species\",                              cam_col = \"Station\",                              obstype_col = \"type\") knitr::kable(sppsum)"},{"path":"https://lisanicvert.github.io/camtrapviz/articles/summarize.html","id":"summarize-per-species-and-cameras","dir":"Articles","previous_headings":"","what":"Summarize per species and cameras","title":"Summarize data","text":"also possible summarize information per species camera using argument by_cam summarize_species function: , obtain table one row per species camera. four first columns without by_cam option, following rows differ: sightings_prop proportion sightings given species given camera individuals_prop proportion individuals given species given camera providing additional information cameras sampling (typically obtained summarize_cameras), relative abundance index can also computed. dfcam provided, three additional columns: sightings_RAI: relative abundance index species’ sightings camera. computed number sightings sampling duration (represents number sightings per time unit). individuals_RAI: sightings_RAI, computed number individuals sampling duration. sampling_length containing sampling duration camera","code":"bycam <- summarize_species(recordTableSample,                            spp_col = \"Species\",                             cam_col = \"Station\",                            by_cam = TRUE) knitr::kable(bycam) camsum <- summarize_cameras(recordTableSample,                             cam_col = \"Station\",                             date_col = \"Date\",                             time_col = \"Time\") bycam_RAI <- summarize_species(recordTableSample,                            spp_col = \"Species\",                             cam_col = \"Station\",                            dfcam = camsum,                            by_cam = TRUE) knitr::kable(bycam_RAI)"},{"path":"https://lisanicvert.github.io/camtrapviz/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lisa Nicvert. Author, maintainer.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nicvert L (2024). camtrapviz: Visualize Camera Trap Data. R package version 0.0.0.9000, https://lisanicvert.github.io/camtrapviz/.","code":"@Manual{,   title = {camtrapviz: Visualize Camera Trap Data},   author = {Lisa Nicvert},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://lisanicvert.github.io/camtrapviz/}, }"},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"camtrapviz-","dir":"","previous_headings":"","what":"Visualize Camera Trap Data","title":"Visualize Camera Trap Data","text":"package currently development camtrapviz R Shiny package visualize summarize camera trap data. intended camera trap data species already tagged compiled tables. package website can found : https://lisanicvert.github.io/camtrapviz/.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualize Camera Trap Data","text":"install package, use:","code":"devtools::install_github(\"https://github.com/LisaNicvert/camtrapviz\",                           build_vignettes = TRUE)"},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"shiny-interface","dir":"","previous_headings":"Functions","what":"Shiny interface","title":"Visualize Camera Trap Data","text":"Shiny interface run computer allows analyze camera trap data interactively. run app, use:  Two example datasets provided: data cameras camtrapR package camtrapDP datapackage camtraptor R package. can also choose data analyze computer.  Shiny app uses Shinymeta display export underlying code Shiny app.","code":"run_camtrapviz()"},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"data-reading-and-formatting","dir":"","previous_headings":"Functions","what":"Data reading and formatting","title":"Visualize Camera Trap Data","text":"package implements functions read clean data (see vignettes data import cleaning data filtering).","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"dataviz","dir":"","previous_headings":"Functions","what":"Dataviz","title":"Visualize Camera Trap Data","text":"several functions visualize data illustrated (using example dataset camtrapR package). First, can plot observations camera versus time:  can also plot cameras map:  also possible plot capture event counts:  can also plot activity histogram curve species:  details plots, see vignette plots vignette activity plots.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/index.html","id":"data-summary-and-analysis","dir":"","previous_headings":"Functions","what":"Data summary and analysis","title":"Visualize Camera Trap Data","text":"functions allow specific analyses: summarize species cameras information (see vignette) get diversity indices cameras species occurrence dataframe (see vignette).","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/camtrapviz-package.html","id":null,"dir":"Reference","previous_headings":"","what":"camtrapviz: Visualize Camera Trap Data — camtrapviz-package","title":"camtrapviz: Visualize Camera Trap Data — camtrapviz-package","text":"Compute visualize common descriptors camera trap data. Shiny app allowing interactively also implemented.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/camtrapviz-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"camtrapviz: Visualize Camera Trap Data — camtrapviz-package","text":"Maintainer: Lisa Nicvert lisa.nicvert@univ-lyon1.fr (ORCID)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast columns types — cast_columns","title":"Cast columns types — cast_columns","text":"Converts columns given format.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast columns types — cast_columns","text":"","code":"cast_columns(   df,   cast_type,   dfname = substitute(df),   vec_name = substitute(cast_type) )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast columns types — cast_columns","text":"df dataframe containing columns specified names cast_type. cast_type named list containing name function cast types. list's names names columns cast df. Elements list can : character giving valid function name call list first element function call (character) additional arguments function call (can named names functions' arguments). dfname Name dataframe display error message. useful function used inside functions better error message. vec_name Name vector columns display error message. useful function used inside functions better error message.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast columns types — cast_columns","text":"original dataframe specified columns casted type indicated cast_type.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/cast_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast columns types — cast_columns","text":"","code":"df <- data.frame(num = 1:10,                  char = letters[1:10],                  date = rep(\"12/24/2020\", 10)) cast <- list(num = \"as.character\",              char = \"as.factor\",              date = list(\"as.Date\",                           format = \"%m/%d/%Y\")) dfcast <- cast_columns(df, cast)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean data — clean_data","title":"Clean data — clean_data","text":"Cleans data : formatting cameras records tables: casting specified columns splitting records data records cameras (needed) only_shared_cam TRUE: selecting subset cameras present records cameras tables reorder TRUE: moving columns rec_type cam_type beginning table.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean data — clean_data","text":"","code":"clean_data(   dat,   cam_type = NULL,   rec_type = NULL,   only_shared_cam = FALSE,   cam_col_dfrec = NULL,   cam_col_dfcam = ifelse(only_shared_cam, cam_col_dfrec, NULL),   split = FALSE,   cam_cols = ifelse(split, cam_col_dfrec, NULL),   reorder = FALSE,   add_rowid = FALSE )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean data — clean_data","text":"dat data clean. can either list one component $data datapackage object (inheriting list). Either way, data $data slot two components: $deployments (cameras table) $observations (records table) cam_type named list containing name function cast types cameras table. used split = FALSE. NULL, cameras table modified columns reordered. list's names names columns cast dat$data$deployments. details content list, see documentation cast_columns function. rec_type named list containing name function cast types records table. split = TRUE, type conversion performed split: future columns cameras table cast list. NULL, records table modified columns reordered. list's names names columns cast dat$data$observations. details content list, see documentation cast_columns function. only_shared_cam Logical; restrict final data shared cameras dat$data$deployments dat$data$observations? cam_col_dfrec Name column cameras names records (needed split only_shared_cam TRUE) cam_col_dfcam Name column cameras names cameras (needed only_shared_cam TRUE). Defaults cam_col_dfrec only_shared_cam TRUE. NULL assumed cam_col_dfrec. split Logical; camera data extracted records table splitting data? cam_cols character vector columns dfrec moved dat$data$deployments dataframe split = TRUE. reorder Reorder columns indicated cam_type rec_type beginning table? add_rowid row IDs added observations df? yes, row names form \"ID_xx\" added dataframe.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean data — clean_data","text":"object type original input, dat$data$deployments dat$data$observations cleaned described .","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/clean_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean data — clean_data","text":"","code":"# Create synthetic dataset records <- data.frame(foo = 1:6,                       species = c(\"pigeon\", \"mouse\", \"pigeon\", \"mouse\", \"mouse\", \"pigeon\"),                       date = c(\"2022-01-01\", \"2022-03-01\",                                 \"2022-01-02\", \"2022-01-12\", \"2022-01-22\",                                \"2022-01-03\"),                       time = c(\"10:22:01\", \"22:12:01\",                                \"11:54:33\", \"07:14:38\", \"18:01:34\",                                 \"12:11:34\"),                       camera = c(\"A\", \"A\", \"B\", \"B\", \"B\", \"C\")) cameras <- data.frame(camera = c(\"A\", \"B\", \"C\"),                       lat = c(\"20.12\", \"20.22\", \"22.34\"),                       lon = c(\"33.44\", \"33.45\", \"33.42\")) dat <- list(data = list(observations = records,                         deployments = cameras))                          # Clean data rec_type <- list(date = list(\"as.Date\",                              format = \"%Y-%m-%d\"),                  time = \"times\") cam_type <- list(lat = \"as.numeric\",                  lon = \"as.numeric\")  # Clean data converts columns to the appropriate types  # and reorders columns clean_data(dat,            rec_type = rec_type,            cam_type = cam_type) #> $data #> $data$observations #>   foo species       date     time camera #> 1   1  pigeon 2022-01-01 10:22:01      A #> 2   2   mouse 2022-03-01 22:12:01      A #> 3   3  pigeon 2022-01-02 11:54:33      B #> 4   4   mouse 2022-01-12 07:14:38      B #> 5   5   mouse 2022-01-22 18:01:34      B #> 6   6  pigeon 2022-01-03 12:11:34      C #>  #> $data$deployments #>   camera   lat   lon #> 1      A 20.12 33.44 #> 2      B 20.22 33.45 #> 3      C 22.34 33.42 #>  #>"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter cameras in both tables — filter_cameras_in_both_tables","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"Filter data keep rows cameras tables","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"","code":"filter_cameras_in_both_tables(   dfrec,   dfcam,   cam_col_dfrec,   cam_col_dfcam = cam_col_dfrec )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"dfrec Records dataframe dfcam Cameras dataframe cam_col_dfrec Name column cameras names dfrec cam_col_dfcam Name column cameras names dfcam NULL assumed cam_col_dfrec.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"list two dataframes filtered values: $records records dataframe $cameras cameras dataframe","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_cameras_in_both_tables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter cameras in both tables — filter_cameras_in_both_tables","text":"","code":"dfrec <- data.frame(species = c(\"pigeon\", \"mouse\", \"pigeon\", \"mouse\"),                       stamp = Sys.time() + seq(60, length.out = 4, by = 60),                       camera = c(\"A\", \"B\", \"C\", \"E\")) dfcam <- data.frame(camera = c(\"A\", \"B\", \"C\", \"D\"),                        lat = c(20.12, 20.22, 22.34, 21.35),                       lon = c(33.44, 33.45, 33.42, 33.53)) filter_cameras_in_both_tables(dfrec, dfcam,                                cam_col_dfrec = \"camera\") #> $records #>   species               stamp camera #> 1  pigeon 2024-04-18 13:29:44      A #> 2   mouse 2024-04-18 13:30:44      B #> 3  pigeon 2024-04-18 13:31:44      C #>  #> $cameras #>   camera   lat   lon #> 1      A 20.12 33.44 #> 2      B 20.22 33.45 #> 3      C 22.34 33.42 #>"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter camera trap data — filter_data","title":"Filter camera trap data — filter_data","text":"Filter camera trap data observations cameras metadata based species, cameras dates. Values filtered default, filter_out FALSE kept instead.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter camera trap data — filter_data","text":"","code":"filter_data(   dat,   spp_filter = NULL,   spp_col = NULL,   obstype_filter = NULL,   obstype_col = NULL,   cam_filter = NULL,   cam_col_rec = NULL,   cam_col_cam = cam_col_rec,   daterange = NULL,   datetime_col = NULL,   time_col = NULL,   date_col = NULL,   custom_filter = NULL,   custom_col = NULL,   tz = NULL,   cam_as_factor = FALSE,   filter_out = TRUE )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter camera trap data — filter_data","text":"dat data filter. can either list one component $data datapackage object (inheriting list). Either way, data $data slot two components: $deployments (cameras table) $observations (records table) spp_filter Species filter data spp_col Name species column (required spp_filter NULL) obstype_filter Observation types filter data obstype_col Name observation column  (required obstype_filter NULL) cam_filter Cameras filter data cam_col_rec Name cameras column records table (dat$data$observations). Required cam_filter NULL. cam_col_cam Name cameras column cameras table (dat$data$deployments). Defaults value cam_col_rec, required cam_filter NULL. daterange Date range filter data (filter observations' times times >= daterange[1] times <= daterange[2]). Can either Date POSIX. datetime_col Name datetime column (must coercible POSIX). needed date_col time_col provided, else required daterange NULL. time_col Name time column. needed datetime_col provided, else required daterange NULL. date_col Name date column. needed datetime_col provided, else required daterange NULL. custom_filter values filter custom column custom_col. custom_col name custom column filter values dat$data$observations (required custom_filter NULL). tz Timezone data bounds. provided, try find timezone daterange (POSIX), datetime_col (provided), finally timezone present default UTC (Etc/GMT). filtering step, needed datetimes datetime_col can converted tz output data affected. cam_as_factor Transform cameras factors? filter_out Filter (TRUE) keep values?","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter camera trap data — filter_data","text":"filtered data. Species dates remove data dat$data$observations, cameras also remove cameras dat$data$deployments.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter camera trap data — filter_data","text":"spp_filter, cam_filter, daterange custom_col values: NULL, data filtered condition. Also note e.g. species spp_filter, species filtered .","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/filter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter camera trap data — filter_data","text":"","code":"data(\"recordTableSample\", package = \"camtrapR\") recordTableSample$DateTimeOriginal <- as.POSIXct(recordTableSample$DateTimeOriginal) data(\"camtraps\", package = \"camtrapR\") dat <- list(data = list(observations = recordTableSample,                         deployments = camtraps)) # Filter out data for species PBE and VTA, camera Station A and keep # only data from 2009-05-01 to 2009-05-15. filter_data(dat,              spp_col = \"Species\",              spp_filter = c(\"PBE\", \"VTA\"),             cam_col_rec = \"Station\",              cam_filter = \"StationA\",             daterange = as.Date(c(\"2009-05-01\", \"2009-05-15\")),             datetime_col = \"DateTimeOriginal\") #> $data #> $data$observations #>     Station Species    DateTimeOriginal       Date     Time delta.time.secs #> 8  StationC     EGY 2009-05-02 03:35:00 2009-05-02 03:35:00          443880 #> 14 StationC     TRA 2009-05-01 20:10:00 2009-05-01 20:10:00          417000 #> 15 StationC     TRA 2009-05-02 00:10:00 2009-05-02 00:10:00           14280 #> 16 StationC     TRA 2009-05-12 02:32:00 2009-05-12 02:32:00          872460 #>    delta.time.mins delta.time.hours delta.time.days #> 8             7398            123.3             5.1 #> 14            6950            115.8             4.8 #> 15             238              4.0             0.2 #> 16           14541            242.3            10.1 #>                                                                                      Directory #> 8  C:/Users/niedballa/Documents/R/win-library/3.1/camtrapR/pictures/sample_images/StationC/EGY #> 14 C:/Users/niedballa/Documents/R/win-library/3.1/camtrapR/pictures/sample_images/StationC/TRA #> 15 C:/Users/niedballa/Documents/R/win-library/3.1/camtrapR/pictures/sample_images/StationC/TRA #> 16 C:/Users/niedballa/Documents/R/win-library/3.1/camtrapR/pictures/sample_images/StationC/TRA #>                                 FileName #> 8  StationC__2009-05-02__03-35-00(1).JPG #> 14 StationC__2009-05-01__20-10-00(1).JPG #> 15 StationC__2009-05-02__00-10-00(1).JPG #> 16 StationC__2009-05-12__02-32-00(1).JPG #>  #> $data$deployments #>    Station  utm_y  utm_x Setup_date Retrieval_date Problem1_from Problem1_to #> 1 StationB 606000 523000 03/04/2009     16/05/2009                           #> 2 StationC 607050 525000 04/04/2009     17/05/2009    12/05/2009  17/05/2009 #>  #>"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_all_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Get species from a dataframe — get_all_species","title":"Get species from a dataframe — get_all_species","text":"function aims giving vector species names corresponding observations dataframe. primarily intended dataframes observations type, non-animal species written NA general type provided (camtrapDP standard).","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_all_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get species from a dataframe — get_all_species","text":"","code":"get_all_species(   df,   spp_col,   obstype_col = NULL,   animal_code = \"animal\",   return_df = ifelse(is.null(obstype_col), FALSE, TRUE) )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_all_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get species from a dataframe — get_all_species","text":"df dataframe spp_col name species column dataframe obstype_col name observation type column dataframe animal_code value obstype_col coding animal observations. return_df return dataframe? TRUE, return dataframe (see ); else return character vector species names.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_all_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get species from a dataframe — get_all_species","text":"species names order df. obstype_col provided,  NA values spp_col replaced corresponding value obstype_col (obstype_col animal_code). return_df TRUE, returns dataframe containing species observation type order df. dataframe following columns (type character): column named like spp_col containing species names (NA values spp_col replaced described ). obstype_col provided: column named like obstype_col containing corresponding observations types. obstype_col provided: column named like spp_col suffix _orig indicates original value spp_col (maybe replaced NA). Else, returns character vector containing values spp_col.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_all_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get species from a dataframe — get_all_species","text":"","code":"df <- data.frame(species = c(\"rabbit\", \"cat\", \"cat\", NA, NA,                               \"cameratrapper\", \"tourist\"),                  type = c(\"animal\", \"animal\", \"animal\", \"fire\", \"blank\",                            \"human\", \"human\")) # Use the type column get_all_species(df, spp_col = \"species\", obstype_col = \"type\") #>         species   type  species_orig #> 1        rabbit animal        rabbit #> 2           cat animal           cat #> 3           cat animal           cat #> 4          fire   fire          <NA> #> 5         blank  blank          <NA> #> 6 cameratrapper  human cameratrapper #> 7       tourist  human       tourist # Use the type column but return a vector get_all_species(df, spp_col = \"species\", return_df = FALSE) #> [1] \"rabbit\"        \"cat\"           \"cat\"           NA              #> [5] NA              \"cameratrapper\" \"tourist\"        # Don't use the type column get_all_species(df, spp_col = \"species\") #> [1] \"rabbit\"        \"cat\"           \"cat\"           NA              #> [5] NA              \"cameratrapper\" \"tourist\""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique cameras vector — get_cameras","title":"Get unique cameras vector — get_cameras","text":"Get unique vector cameras present either one list .","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique cameras vector — get_cameras","text":"","code":"get_cameras(cam1, cam2, NA.last = TRUE)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique cameras vector — get_cameras","text":"cam1 Character vector camera names. cam2 Character vector camera names. NA.last Value NA.last argument unique sort functions","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique cameras vector — get_cameras","text":"vector unique cameras present vectors. NAs kept placed last position. Alphabetical order used.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get unique cameras vector — get_cameras","text":"","code":"cam1 <- c(\"C1\", \"C2\", \"C3\", NA) cam2 <- c(\"C2\", \"C3\", \"C4\") get_cameras(cam1, cam2) #> [1] \"C1\" \"C2\" \"C3\" \"C4\" NA"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":null,"dir":"Reference","previous_headings":"","what":"Get non-shared cameras between two dataframes — get_cameras_not_in","title":"Get non-shared cameras between two dataframes — get_cameras_not_in","text":"Using two dataframes input, determine cameras one tables one.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get non-shared cameras between two dataframes — get_cameras_not_in","text":"","code":"get_cameras_not_in(dfrecords, dfcameras, cam_col_dfrec, cam_col_dfcam)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get non-shared cameras between two dataframes — get_cameras_not_in","text":"dfrecords records dataframe dfcameras cameras dataframe cam_col_dfrec name cameras column records dataframe cam_col_dfcam name cameras column cameras dataframe","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get non-shared cameras between two dataframes — get_cameras_not_in","text":"named list two components $not_in_records: cameras dfcameras dfrecords. cameras dfcameras dfrecords, character vector length zero. $not_in_cameras: cameras dfrecords dfcameras cameras dfrecords dfcameras, character vector length zero.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_cameras_not_in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get non-shared cameras between two dataframes — get_cameras_not_in","text":"","code":"dfrecords <- data.frame(camID = letters[2:7]) dfcam <- data.frame(cameras = letters[1:5]) get_cameras_not_in(dfrecords = dfrecords,                     dfcameras = dfcam,                    cam_col_dfrec = \"camID\",                    cam_col_dfcam = \"cameras\") #> $not_in_records #> [1] \"a\" #>  #> $not_in_cameras #> [1] \"f\" \"g\" #>"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Get diversity indices — get_diversity_indices","title":"Get diversity indices — get_diversity_indices","text":"summary table camera/species, return richness, Shannon Simpson diversity indices.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get diversity indices — get_diversity_indices","text":"","code":"get_diversity_indices(   dfcount,   spp_col,   cam_col,   count_col = \"individuals\",   prop_col = \"individuals_prop\" )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get diversity indices — get_diversity_indices","text":"dfcount Dataframe summarizing counts per species. Can computed using records dataframe summarize_species function. spp_col Name column containing species names cam_col Name column containing cameras names count_col Name column containing species counts prop_col Name column containing species proportions","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get diversity indices — get_diversity_indices","text":"dataframe one row per camera summarizing diversity indices.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get diversity indices — get_diversity_indices","text":"Computes richness, Shannon Simpson indices. See vignette(\"diversity\", package = \"camtrapviz\") details formulas diversity indices.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_diversity_indices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get diversity indices — get_diversity_indices","text":"","code":"countdf <- data.frame(camera = c(\"C1\", \"C1\", \"C1\", \"C2\",                                  \"C3\", \"C3\", \"C3\"),                       species = c(\"cat\", \"cow\", \"rabbit\",                                   \"cat\", \"cat\", \"cow\", \"rabbit\"),                       individuals = c(30, 30, 30, 30, 88, 1, 1),                       individuals_prop = c(1/3, 1/3, 1/3, 1, 88/90, 1/90, 1/90)) get_diversity_indices(countdf,                        spp_col = \"species\", cam_col = \"camera\") #>   camera richness   shannon   simpson #> 1     C1        3 1.0986123 0.3258427 #> 2     C2        1 0.0000000 1.0000000 #> 3     C3        3 0.1219692 0.9558052"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":null,"dir":"Reference","previous_headings":"","what":"Get species count from a dataframe — get_nspecies","title":"Get species count from a dataframe — get_nspecies","text":"Get species count dataframe","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get species count from a dataframe — get_nspecies","text":"","code":"get_nspecies(df, spp_col, obstype_col = NULL, keep_NA = FALSE)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get species count from a dataframe — get_nspecies","text":"df dataframe spp_col name species column dataframe obstype_col name observation type column dataframe keep_NA count NAs species length?","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get species count from a dataframe — get_nspecies","text":"number species. obstype_col provided, ignore species obstype_col value different animal. keep_NA, count NA total species count.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_nspecies.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get species count from a dataframe — get_nspecies","text":"","code":"df <- data.frame(obstype = c(\"animal\", \"animal\", \"animal\", \"animal\", \"blank\"),                  species = c(\"cat\", \"cat\", \"cow\", \"dog\", NA)) get_nspecies(df, spp_col = \"species\", obstype_col = \"obstype\") #> [1] 3"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_unique_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Get unique species from a dataframe — get_unique_species","title":"Get unique species from a dataframe — get_unique_species","text":"function aims giving unique species names corresponding dataframe. primarily intended dataframes observations type, non-animal species written NA general type provided (camtrapDP standard).","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_unique_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get unique species from a dataframe — get_unique_species","text":"","code":"get_unique_species(   df,   spp_col,   obstype_col = NULL,   animal_code = \"animal\",   return_df = ifelse(is.null(obstype_col), FALSE, TRUE),   reorder = FALSE,   add_ID = FALSE )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_unique_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get unique species from a dataframe — get_unique_species","text":"df dataframe spp_col name species column dataframe obstype_col name observation type column dataframe animal_code value obstype_col coding animal observations. return_df return dataframe? TRUE, return dataframe (see ); else return character vector unique species names. reorder Reorder results? arrange values alphabetical order. obstype_col provided, non-animal species arranged last. add_ID Add ID column?","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_unique_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get unique species from a dataframe — get_unique_species","text":"unique species names. obstype_col provided,  NA values spp_col replaced corresponding value obstype_col (obstype_col animal_code). return_df TRUE, returns dataframe containing unique species observation type. dataframe following columns (type character): add_ID TRUE: column ID uniquely identify species/observation combination (IDs numbers). type observation type value. Else, IDs form spp. column named like spp_col containing species names (NA values spp_col replaced described ). obstype_col provided: column named like obstype_col containing corresponding observations types. obstype_col provided: column named like spp_col suffix _orig indicates original value spp_col (maybe replaced NA). return_df FALSE, returns unique values spp_col.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/get_unique_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get unique species from a dataframe — get_unique_species","text":"","code":"df <- data.frame(species = c(\"rabbit\", \"cat\", \"cat\", NA, NA,                               \"cameratrapper\", \"tourist\"),                  type = c(\"animal\", \"animal\", \"animal\", \"fire\", \"blank\",                            \"human\", \"human\")) # Use the type column get_unique_species(df, spp_col = \"species\", obstype_col = \"type\",                    reorder = TRUE) #>         species   type  species_orig #> 1           cat animal           cat #> 2        rabbit animal        rabbit #> 3         blank  blank          <NA> #> 4          fire   fire          <NA> #> 5 cameratrapper  human cameratrapper #> 6       tourist  human       tourist # Use the type column but return a vector get_unique_species(df, spp_col = \"species\", return_df = FALSE,                    reorder = TRUE) #> [1] \"cameratrapper\" \"cat\"           \"rabbit\"        \"tourist\"       #> [5] NA               # Don't use the type column get_unique_species(df, spp_col = \"species\",                    reorder = TRUE) #> [1] \"cameratrapper\" \"cat\"           \"rabbit\"        \"tourist\"       #> [5] NA"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_activity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot activity data — plot_activity","title":"Plot activity data — plot_activity","text":"Plot activity data","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_activity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot activity data — plot_activity","text":"","code":"plot_activity(   dfrec = NULL,   time_dfrec = NULL,   dffit = NULL,   time_dffit = NULL,   y_fit = NULL,   n = ifelse(!is.null(dfrec), nrow(dfrec), NULL),   plot_hist = ifelse(is.null(dfrec), FALSE, TRUE),   plot_density = ifelse(is.null(dffit), FALSE, TRUE),   hist_breaks = ifelse(unit == \"clock\", 1, (2 * pi)/24),   x_breaks = ifelse(unit == \"clock\", 4, ((2 * pi)/24) * 4),   unit = c(\"clock\", \"radians\"),   xlab = ifelse(unit == \"clock\", \"Time (hours)\", \"Time (radians)\"),   ylab = ifelse(freq, \"Count\", \"Density\"),   freq = TRUE,   interactive = FALSE )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_activity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot activity data — plot_activity","text":"dfrec dataframe containing species records time_dfrec Name column containing times dfrec. chron::times object, converted radians (0 -- 2pi) clock times (0 -- 24) (depending unit). Else, expected unit unit. dffit Dataframe fitted distribution time_dffit Name column containing times dffit. column must contain numeric values radians converted unit hours. y_fit Name column containing density dffit. column must contain numeric values corresponding radians density converted unit hours. n Count observed data. required wish plot predicted species \"density count\" (plot_density TRUE freq FALSE). plot_hist Plot histogram counts? plot_density Plot activity curve? hist_breaks Breaks histogram (hours radians depending value unit). x_breaks Breaks x-axis ticks (hours radians depending value unit). unit Unit plot (radians clock). change density y scale labels limits x-axis. xlab Label x-axis ylab Label y-axis freq Display count data (TRUE) density (FALSE) ? interactive Make plot interactive?","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_activity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot activity data — plot_activity","text":"ggplot representing histogram observed activity times dfrec.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_activity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot activity data — plot_activity","text":"column time_dfrec type times, automatic conversion clock times radians performed. Else, script trusts user provided unit. plotting histogram: freq TRUE, height bars category represents count falls category. freq FALSE, area bar category represents proportion data falls category. plotting curve: freq TRUE: area curve equal n converting x-scale hours, even x axis radians. height curve change hours radians. freq FALSE, area curve one depends x unit (height curve changes hours radians). match original code plot.actmod.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_activity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot activity data — plot_activity","text":"","code":"library(activity) library(chron) data(recordTableSample, package = \"camtrapR\") # Convert hours to times format recordTableSample$Time <- chron::times(recordTableSample$Time) # Select the desired species PBE_records <- recordTableSample[recordTableSample$Species == \"PBE\", ]  # Plot only data plot_activity(dfrec = PBE_records,               time_dfrec = \"Time\",               unit = \"clock\")   # Plot only data (density) plot_activity(dfrec = PBE_records,               time_dfrec = \"Time\",               unit = \"clock\",               freq = FALSE)   # Fit model # Convert hours to times format PBE_records$time_radians <- as.numeric(PBE_records$Time)*2*pi vm <- activity::fitact(PBE_records$time_radians) pdf_vm <- as.data.frame(vm@pdf)  # Plot data and fitted model in radians plot_activity(dffit = pdf_vm,               time_dffit = \"x\",               y_fit = \"y\",               unit = \"radians\",               freq = FALSE,               n = nrow(PBE_records))   # Plot data and fitted model in hours plot_activity(dffit = pdf_vm,               time_dffit = \"x\",               y_fit = \"y\",               unit = \"clock\",               freq = FALSE,               n = nrow(PBE_records))"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot species diversity at cameras — plot_diversity","title":"Plot species diversity at cameras — plot_diversity","text":"Plot species diversity cameras","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot species diversity at cameras — plot_diversity","text":"","code":"plot_diversity(   df,   div_col,   cam_col,   cam_vec = NULL,   round = 3,   interactive = FALSE )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot species diversity at cameras — plot_diversity","text":"df dataframe diversity indices per camera div_col Name column containing diversity index plot cam_col Name column containing cameras names cam_vec character vector cameras appear plot (optional) round Rounding option diversity indices displayed hovering. NULL rounding. interactive Make plot interactive?","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot species diversity at cameras — plot_diversity","text":"ggplot object representing diversity indices bars (x) following different cameras (y).","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot species diversity at cameras — plot_diversity","text":"","code":"# Create synthetic data --- df <- data.frame(\"camera\" = c(\"C1\", \"C2\", \"C4\", \"C3\"),                  \"count\" = c(1, 4, 2, 22))  plot_diversity(df,                 div_col = \"count\",                 cam_col = \"camera\")"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot cameras map — plot_map","title":"Plot cameras map — plot_map","text":"Plot leaflet map representing cameras' coordinates points.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot cameras map — plot_map","text":"","code":"plot_map(   df,   lat_col,   lon_col,   popup = NULL,   display_camnames = FALSE,   crs = 4326,   width = NULL,   height = NULL,   cam_col,   color = \"black\",   radius = rep(3, nrow(df)),   rescale = FALSE,   label = NULL )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot cameras map — plot_map","text":"df dataframe containing cameras information lat_col Name latitude (projected y-coordinate) column lon_col Name longitude (projected y-coordinate) column popup vector characters display popup camera. must length number cameras df must ordered way cameras df. display_camnames Display camera names map? crs EPSG code coordinate reference system (CRS) Defaults EPSG:4326, code WGS84 standard. width Map width height Map height cam_col Name camera name column color color points (can unique value character vector, order rows df) radius vector radii use cirles. can named names correspond camera names. named, labels assumed order cameras. rescale rescale circles? TRUE, radii linearly resized maximum corresponds 300m, radii smaller 10 set 10m. label vector labels display hovering map points. can named names correspond camera names. named, labels assumed order cameras.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot cameras map — plot_map","text":"leaflet map representing cameras points. CRS input data different EPSG:4326 (WGS84), data re-projected using WGS84. hovering camera, becomes red name shown. clicking camera, popup displaying camera name appears.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot cameras map — plot_map","text":"","code":"data(camtraps, package = \"camtrapR\") plot_map(camtraps,          lat_col = \"utm_y\",           lon_col = \"utm_x\",          crs = 32650, # Here we use the EPSG code for UTM zone 50N          cam_col = \"Station\")  {\"x\":{\"options\":{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}}},\"calls\":[{\"method\":\"addTiles\",\"args\":[\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",null,null,{\"minZoom\":0,\"maxZoom\":18,\"tileSize\":256,\"subdomains\":\"abc\",\"errorTileUrl\":\"\",\"tms\":false,\"noWrap\":false,\"zoomOffset\":0,\"zoomReverse\":false,\"opacity\":1,\"zIndex\":1,\"detectRetina\":false,\"attribution\":\"&copy; <a href=\\\"https://openstreetmap.org/copyright/\\\">OpenStreetMap<\\/a>,  <a href=\\\"https://opendatacommons.org/licenses/odbl/\\\">ODbL<\\/a>\"}]},{\"method\":\"addCircleMarkers\",\"args\":[[5.46436552331582,5.482468354317958,5.491960550449553],[117.2347143299215,117.2076382765414,117.2256972583553],[3,3,3],[\"StationA\",\"StationB\",\"StationC\"],null,{\"interactive\":true,\"className\":\"\",\"stroke\":false,\"color\":\"#03F\",\"weight\":5,\"opacity\":0.5,\"fill\":true,\"fillColor\":[\"black\",\"black\",\"black\"],\"fillOpacity\":0.8},null,null,[\"Camera: StationA\",\"Camera: StationB\",\"Camera: StationC\"],{\"maxWidth\":300,\"minWidth\":50,\"autoPan\":true,\"keepInView\":false,\"closeButton\":true,\"closeOnClick\":true,\"className\":\"\"},[\"StationA\",\"StationB\",\"StationC\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]}],\"limits\":{\"lat\":[5.46436552331582,5.491960550449553],\"lng\":[117.2076382765414,117.2347143299215]}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot species occurrences at cameras — plot_points","title":"Plot species occurrences at cameras — plot_points","text":"Plot species occurrences cameras points time.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot species occurrences at cameras — plot_points","text":"","code":"plot_points(   df,   cam_col,   datetime_col = NULL,   tz = NULL,   date_col = NULL,   time_col = NULL,   cam_vec = NULL,   points_col = NULL,   dfcam = NULL,   cam_col_dfcam = cam_col,   setup_dfcam = \"setup\",   retrieval_dfcam = \"retrieval\",   interactive = FALSE,   textsize = 10,   text_x_angle = 0,   ptsize = 1.5,   date_breaks = NULL,   date_format = \"%b %d\",   date_limits = NULL,   alpha_rect = 0.5,   col_rect = \"black\",   height_rect = 0.8,   fill_rect = NA,   tooltip_info = points_col,   xlab = \"Date\",   ylab = \"Camera\",   cols = \"black\" )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot species occurrences at cameras — plot_points","text":"df dataframe cam_col Name camera column datetime_col Name timestamp column. datetime, must class POSIXct. can NULL date_col time_col provided. tz Timezone code use data. provided, data converted timezone. missing, search timezone datetime_col (provided), else default UTC (Etc/GMT R code). data timezone (default timezone) also override timezone present setup_dfcam retrieval_dfcam. date_col Name date column. assumed class Date (else, results guaranteed). can NULL datetime_col provided. time_col Name time column. assumed class times (else, results guaranteed). can NULL datetime_col provided. cam_vec character vector cameras appear plot (optional) points_col Name column use color data points (defaults species column). graph interactive, also displayed labels. interpred discrete color scale. dfcam Dataframe containing camera information. Must least one column camera ID, setup retrieval date. cam_col_dfcam Name camera column dfcam file. setup_dfcam Name setup column dfcam file. column must coercible POSIX (eg Date). POSIX, converted POSIX attempting use timezone defined tz (default). POSIX, timezone converted tz. retrieval_dfcam Name retrieval column dfcam file. column must coercible POSIX (eg Date). POSIX, converted POSIX attempting use timezone defined tz (default). POSIX, timezone converted tz. interactive Logical; make plot interactive ggiraph? textsize Base text size axis text (axes titles 1.2 times bigger) text_x_angle Tilting angle x-axis text. ptsize Size points plot date_breaks Character describing x-axis ticks spacing (e.g. \"10 day\"). possible values, see documentation ggplot2::scale_y_datetime argument date_breaks. date_format Character string encoding display format x-axis labels. date_limits Vector lower upper limit x-axis  (must POSIX). timezone timezone defined timezone argument. alpha_rect transparency rectangle plotted sampling period (dfcam given) col_rect stroke color rectangle plotted sampling period (dfcam given) height_rect height rectangle plotted sampling period (dfcam given). height centered middle. 2 corresponds th space y-axis ticks entirely filled. fill_rect fill color rectangle plotted sampling period (dfcam given) tooltip_info Name column display tooltip hovering points (interactive TRUE). data column displayed additionally point datetime. NULL, datetime displayed. xlab Label x-axis ylab Label y-axis cols Color palette points. Can either palette single color name. single color name provided, points_col several values, parameter overriden default palette. palette colors provided cols, values matched points_col values. cols can named values points_col map colors. Else, mapping done alphabetical order. palette provided, colors values points_col, warning issued subset selected (based names palette values points_col, applicable). less colors, error returned.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot species occurrences at cameras — plot_points","text":"ggplot object representing time x-axis cameras y-axis. Colors points correspond different species.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot species occurrences at cameras — plot_points","text":"date_col time_col provided along datetime_col, ignored.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot species occurrences at cameras — plot_points","text":"","code":"data(\"recordTableSample\", package = \"camtrapR\") recordTableSample$DateTimeOriginal <- as.POSIXct(recordTableSample$DateTimeOriginal) # Without camera sampling information plot_points(recordTableSample,              cam_col = \"Station\",              datetime_col = \"DateTimeOriginal\")  # With camera sampling information data(\"camtraps\", package = \"camtrapR\") camtraps$Setup_date <- as.Date(camtraps$Setup_date,                                 format = \"%d/%m/%Y\")  camtraps$Retrieval_date <- as.Date(camtraps$Retrieval_date,                                     format = \"%d/%m/%Y\") plot_points(recordTableSample,              cam_col = \"Station\",              datetime_col = \"DateTimeOriginal\",             dfcam = camtraps,             setup_dfcam = \"Setup_date\",             retrieval_dfcam = \"Retrieval_date\")"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":null,"dir":"Reference","previous_headings":"","what":"Barplot of species abundance — plot_species_bars","title":"Barplot of species abundance — plot_species_bars","text":"Plot species abundance barplot.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barplot of species abundance — plot_species_bars","text":"","code":"plot_species_bars(   df,   spp_col,   count_col = NULL,   obstype_col = NULL,   interactive = FALSE,   NA_count_placeholder = NA )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Barplot of species abundance — plot_species_bars","text":"df dataframe spp_col Name species column count_col Name count column (optional). missing, assumed 1 observations. obstype_col Name observation type column (optional). present, function plot observations obstype_col \"animal\". interactive Logical; make plot interactive ggiraph? NA_count_placeholder Value replace NAs present column containing counts. specified, NA default species NA counts NA count.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Barplot of species abundance — plot_species_bars","text":"ggplot object representing horizontal bars species count. x-axis observed number individuals y-axis different species.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/plot_species_bars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Barplot of species abundance — plot_species_bars","text":"","code":"data(\"recordTableSample\", package = \"camtrapR\") plot_species_bars(recordTableSample,                   spp_col = \"Species\")"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read data — read_data","title":"Read data — read_data","text":"Reads data file path (either csv json file), optionally another csv file (camera data).","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read data — read_data","text":"","code":"read_data(   path_rec,   sep_rec,   path_cam = NULL,   sep_cam = NULL,   NA_strings = c(\"NA\", \"\"),   add_rowid = FALSE )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read data — read_data","text":"path_rec valid file path records. sep_rec separator used records. path_cam valid file path cameras (defaults NULL). sep_cam separator used cameras (defaults NULL). NA_strings Vector characters considered NA import add_rowid row IDs added observations df? yes, row names form \"ID_xx\" added dataframe.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read data — read_data","text":"list one component datapackage object. path_rec json file, returns datapackage object (inheriting list). data $data slot, list 2 components: $deployments (cameras) $observations (records) path_rec csv file, returns list one component named $data, list 2 components: $deployments (cameras: camera file provided path_cam, NULL) $observations (records)","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/read_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read data — read_data","text":"","code":"if (FALSE) { # Read only records read_data(path_rec = \"records.csv\", sep_rec = \",\") # Read records and cameras read_data(path_rec = \"records.csv\", sep_rec = \",\",           path_cam = \"cameras.csv\", sep_cam = \",\") # Read a json file read_data(path_rec = \"datapackage.json\") }"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove rows with NA — remove_rows_with_NA","title":"Remove rows with NA — remove_rows_with_NA","text":"Remove rows NA","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove rows with NA — remove_rows_with_NA","text":"","code":"remove_rows_with_NA(df, mapping)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove rows with NA — remove_rows_with_NA","text":"df dataframe remove NA mapping mapping list columns dataframe. Names column types. free, except species column observation type column, must coded respectively obstype_col spp_col (exist). obstype_col present names, spp_col assumed present . Values corresponding column names dataframe.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove rows with NA — remove_rows_with_NA","text":"filtered dataframe, rows mapping contain NA values. NA allowed spp_col obstype_col mapping animal.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/remove_rows_with_NA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove rows with NA — remove_rows_with_NA","text":"","code":"df <- data.frame(species = c(\"pigeon\", \"mouse\", NA, \"pigeon\"),                   type = c(\"animal\", \"animal\", \"blank\", \"animal\"),                  stamp = Sys.time() + seq(60, length.out = 4, by = 60),                   camera = c(\"A\", \"B\", \"C\", NA)) mapping <- list(spp_col = \"species\",                 obstype_col = \"type\",                 datetime_col = \"stamp\",                 cam_col = \"camera\") remove_rows_with_NA(df, mapping) #>   species   type               stamp camera #> 1  pigeon animal 2024-04-18 13:29:49      A #> 2   mouse animal 2024-04-18 13:30:49      B #> 3    <NA>  blank 2024-04-18 13:31:49      C"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/run_camtrapviz.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Shiny app — run_camtrapviz","title":"Run Shiny app — run_camtrapviz","text":"Runs Shiny app visualize camera trap data.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/run_camtrapviz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Shiny app — run_camtrapviz","text":"","code":"run_camtrapviz(...)"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/run_camtrapviz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Shiny app — run_camtrapviz","text":"... Arguments pass shiny::shinyApp besides server ui","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/run_camtrapviz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Shiny app — run_camtrapviz","text":"working Shiny app","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize cameras — summarize_cameras","title":"Summarize cameras — summarize_cameras","text":"Summarize information cameras activity camera trap data.","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize cameras — summarize_cameras","text":"","code":"summarize_cameras(   dfrec,   cam_col,   datetime_col = NULL,   date_col = NULL,   time_col = NULL,   spp_col = NULL,   obstype_col = NULL,   dfcam = NULL,   cam_col_dfcam = ifelse(is.null(dfcam), NULL, cam_col),   setup_col = NULL,   retrieval_col = NULL )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize cameras — summarize_cameras","text":"dfrec records dataframe: must contain camera names infortmation pictures sampling time (date time datetime). cam_col name column containing camera ID datetime_col name column containing timestamps pictures (optional date_col time_col provided) date_col name column containing date (optional datetime_col provided) time_col name column containing time (optional datetime_col provided) spp_col name species column (optional). present, summarry include number species seen camera. obstype_col name observation type column dfcam dataframe cameras deployments (optional). cam_col_dfcam name column containing camera ID dfcam dfcam provided cam_col_dfcam NULL, set cam_col. setup_col name column containing setup date datetime dfcam (optional) retrieval_col name column containing retrieval date datetime dfcam (optional)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize cameras — summarize_cameras","text":"summary returned dataframe following columns: column named cam_col containing camera ID. sampling_length length sampling period days (computed cameraOperation function camtrapR package). setup retrieval NA, sampling_length NA setup retrieval (e.g. unique picture), sampling_length zero. pictures: number pictures taken camera (zero camera dfcam dfrec). species (present spp_col provided): number species caught camera. obstype_col provided, species marked NA spp_col different values obs_type counted different species. setup containing start sampling camera. retrieval containing end sampling camera. setup_origin containing method used determine start sampling (picture setup) retrieval_origin containing method used determine end sampling (picture retrieval)","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize cameras — summarize_cameras","text":"final dataframe, start end sampling computed follows camera: setup retrieval date provided dfcam, dates used start end sampling summary. cameras information provided, replaced date first last picture camera. information start end sampling computed stored setup_origin retrieval_origin. setup retrieval date provided via dfcam, setup_origin retrieval_origin metadata. else, columns contain picture. dfcam provided setup retrieval columns, cameras added columns except camera name NA. function uses cameraOperation function camtrapR package, camera names may contain Cam reserved name function.","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_cameras.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize cameras — summarize_cameras","text":"","code":"# Create synthetic data records <- data.frame(species = c(\"pigeon\", \"mouse\", \"pigeon\", \"mouse\", \"mouse\"),                       stamp = as.POSIXct(c(\"2022-01-01 10:22:01\", \"2022-03-01 22:12:01\",                                            \"2022-01-02 11:54:33\", \"2022-01-12 07:14:38\",                                             \"2022-01-22 18:01:34\")),                       camera = c(\"A\", \"A\", \"B\", \"B\", \"B\")) cameras <- data.frame(camera = c(\"A\", \"B\", \"C\"),                       setup = as.Date(c(NA, \"2021-12-01\", \"2021-12-01\")),                       retrieval = as.Date(c(\"2022-03-01\", \"2022-03-01\", NA))) # Summarize cameras summarize_cameras(records,                    cam_col = \"camera\", datetime_col = \"stamp\",                    dfcam = cameras,                    setup_col = \"setup\", retrieval_col = \"retrieval\",                   spp_col = \"species\") #>   camera pictures species sampling_length               setup  retrieval #> 1      A        2       2          58.568 2022-01-01 10:22:01 2022-03-01 #> 2      B        3       2          90.000 2021-12-01 00:00:00 2022-03-01 #> 3      C        0      NA              NA 2021-12-01 00:00:00       <NA> #>   setup_origin retrieval_origin #> 1      picture         metadata #> 2     metadata         metadata #> 3     metadata             <NA> # Since camera A had no setup date, the first picture is used. # For camera B, setup and retrieval are taken from dfcam. # For camera C, as it is present only on dfcam and has no retrieval date, # only a setup date is indicated."},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize species — summarize_species","title":"Summarize species — summarize_species","text":"Summarize species information data table","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize species — summarize_species","text":"","code":"summarize_species(   df,   spp_col,   cam_col = NULL,   obstype_col = NULL,   count_col = NULL,   ncam = NULL,   by_cam = FALSE,   keep_all_camera_levels = FALSE,   dfcam = NULL,   cam_col_dfcam = ifelse(is.null(dfcam), NULL, cam_col),   duration_col_dfcam = ifelse(is.null(dfcam), NULL, \"sampling_length\"),   NA_count_placeholder = NA )"},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize species — summarize_species","text":"df observation dataframe summarize spp_col Name species column cam_col Name column containing camera codes (optional by_cam FALSE) obstype_col Name observation type column (optional) count_col Name column containing species count (optional) ncam Number cameras take account computing proportion cameras species ween . NULL, defaults number cameras present df (needed cam_col provided). by_cam values summarized camera? yes, one row per cameras-species keep_all_camera_levels camera species seen, present output? needed cam_col provided. dfcam Dataframe containing information cameras sampling length. provided, cam_col_dfcam duration_col_dfcam must column names. cam_col_dfcam Column name containing cameras names dfcam duration_col_dfcam Column name containing sampling duration dfcam NA_count_placeholder Value replace NAs present column containing counts. Defaults NA (.e. values replaced).","code":""},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize species — summarize_species","text":"table summarizing species information following columns: Species (named like spp_col): species identity (spp_col input column) Observation type (present obstype_col NULL named like obstype_col): observation type (obstype_col input column) sightings: number rows species photographed. individuals: count individuals observed pictures (using input count_col column). count_col NULL, contains values sightings. NAs input  count_col, propagate individuals (unless value specified NA_count_placeholder). by_cam FALSE, following rows also present: n_cameras (present cam_col NULL) : number cameras species seen . prop_cam (present cam_col NULL): proportion cameras species seen . ncam provided, uses ncam total number cameras. by_cam TRUE, following rows also present: sightings_prop: proportion sightings represented species camera. individuals_prop: proportion individuans represented species camera. by_cam TRUE dfcam provided, following rows also present: sightings_RAI: relative abundance index species' sightings camera. computed number sightings sampling duration (represents number sightings per time unit). individuals_RAI: sightings_RAI, computed number individuals sampling duration. Sampling duration (named like duration_col_dfcam): sampling duration camera Finally, keep_all_camera_levels TRUE, final column named empty added indicate cameras empty (data).","code":""},{"path":[]},{"path":"https://lisanicvert.github.io/camtrapviz/reference/summarize_species.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize species — summarize_species","text":"","code":"df <- data.frame(species = c(\"zebra\", \"cat\", \"cat\", \"cow\", NA, NA),                  type = c(\"animal\", \"animal\", \"animal\", \"animal\", \"human\", \"blank\"),                  camera = c(\"C1\", \"C1\", \"C2\", \"C3\", \"C3\", \"C4\"),                  count = c(1, 1, 3, 50, 1, NA)) # Summarize species across all cameras summarize_species(df,                    spp_col = \"species\", cam_col = \"camera\",                   obstype_col = \"type\",                   count_col = \"count\",                   NA_count_placeholder = 1) #>   species   type sightings individuals n_cameras prop_cam #> 1     cat animal         2           4         2     0.50 #> 2     cow animal         1          50         1     0.25 #> 3   zebra animal         1           1         1     0.25 #> 4    <NA>  blank         1           1         1     0.25 #> 5    <NA>  human         1           1         1     0.25 # Summarize per species and cameras summarize_species(df,                    spp_col = \"species\", cam_col = \"camera\",                   obstype_col = \"type\",                   count_col = \"count\",                   by_cam = TRUE,                   NA_count_placeholder = 1) #>   species   type camera sightings individuals sightings_prop individuals_prop #> 1     cat animal     C1         1           1            0.5       0.50000000 #> 2     cat animal     C2         1           3            1.0       1.00000000 #> 3     cow animal     C3         1          50            0.5       0.98039216 #> 4   zebra animal     C1         1           1            0.5       0.50000000 #> 5    <NA>  blank     C4         1           1            1.0       1.00000000 #> 6    <NA>  human     C3         1           1            0.5       0.01960784 # Add camera sampling length to get the RAI cam_sampling <- data.frame(camera = c(\"C1\", \"C2\", \"C3\", \"C4\"),                            sampling_duration = c(100, 1, 10, 10)) summarize_species(df,                    spp_col = \"species\", cam_col = \"camera\",                   obstype_col = \"type\",                   count_col = \"count\",                   by_cam = TRUE,                   dfcam = cam_sampling,                   duration_col_dfcam = \"sampling_duration\",                   NA_count_placeholder = 1) #>   species   type camera sightings individuals sightings_prop individuals_prop #> 1     cat animal     C1         1           1            0.5       0.50000000 #> 2     cat animal     C2         1           3            1.0       1.00000000 #> 3     cow animal     C3         1          50            0.5       0.98039216 #> 4   zebra animal     C1         1           1            0.5       0.50000000 #> 5    <NA>  blank     C4         1           1            1.0       1.00000000 #> 6    <NA>  human     C3         1           1            0.5       0.01960784 #>   sightings_RAI individuals_RAI sampling_duration #> 1          0.01            0.01               100 #> 2          1.00            3.00                 1 #> 3          0.10            5.00                10 #> 4          0.01            0.01               100 #> 5          0.10            0.10                10 #> 6          0.10            0.10                10"}]
