% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_plot.R
\name{plot_activity}
\alias{plot_activity}
\title{Plot activity data}
\usage{
plot_activity(
  true_data = NULL,
  times_true = NULL,
  fitted_data = NULL,
  times_fit = NULL,
  y_fit = NULL,
  n = ifelse(!is.null(true_data), nrow(true_data), NULL),
  plot_hist = ifelse(is.null(true_data), FALSE, TRUE),
  plot_density = ifelse(is.null(fitted_data), FALSE, TRUE),
  hist_breaks = ifelse(unit == "clock", 1, (2 * pi)/24),
  x_breaks = ifelse(unit == "clock", 4, ((2 * pi)/24) * 4),
  unit = c("clock", "radians"),
  xlab = ifelse(unit == "clock", "Time (hours)", "Time (radians)"),
  ylab = ifelse(freq, "Count", "Density"),
  freq = TRUE,
  interactive = FALSE
)
}
\arguments{
\item{true_data}{dataframe containing species records}

\item{times_true}{Name of the column containing times in \code{true_data}}

\item{fitted_data}{Dataframe of fitted distribution}

\item{times_fit}{Name of the column containing times in \code{fitted_data}.
This column must contain numeric values in radians and will be
converted if unit is \code{hours}.}

\item{y_fit}{Name of the column containing density in \code{fitted_data}.
This column must contain numeric values corresponding to the
radians density and will be converted if unit is \code{hours}.}

\item{n}{Count for the observed data. It is required only when
you wish to plot the predicted species "density count"
(so \code{plot_density} is \code{TRUE} and \code{freq} is \code{FALSE}).}

\item{plot_hist}{Plot the histogram of counts?}

\item{plot_density}{Plot the activity curve?}

\item{hist_breaks}{Breaks for the histogram (in hours or radians
depending on the value of \code{unit}).}

\item{x_breaks}{Breaks for the x-axis ticks (in hours or radians
depending on the value of \code{unit}).}

\item{unit}{Unit for the plot (radians or clock). Will change the
density on the y scale and the labels and limits of the x-axis.}

\item{xlab}{Label for the x-axis}

\item{ylab}{Label for the y-axis}

\item{freq}{Display count data (\code{TRUE}) or density (\code{FALSE}) ?}

\item{interactive}{Make the plot interactive?}
}
\value{
A ggplot representing a histogram of observed activity times
from \code{true_data}.
}
\description{
Plot activity data
}
\details{
If the column \code{times_true} if of type \code{times}, automatic conversion to
clock times or radians will be performed. Else, the script trusts
the user for the provided unit.
\itemize{
\item If plotting a histogram: when \code{freq} is \code{TRUE}, the height of
the bars in each category represents the count that falls in this category.
When \code{freq} is \code{FALSE}, the area of the bar in each category represents
the proportion of the data that falls in this category.
\item If plotting a curve: when \code{freq} is \code{TRUE}: the area under the curve
is equal to \code{n} when converting the x-scale to hours, even if the x axis
is in radians. So the height of the curve does not change between hours and radians.
When \code{freq} is \code{FALSE}, the area under the curve is one and depends on the x unit
(so the height of the curve changes between hours and radians). This is to match the
original code of \code{plot.actmod}.
}
}
\examples{
library(activity)
library(chron)
data(recordTableSample, package = "camtrapR")
# Convert hours to times format
recordTableSample$Time <- chron::times(recordTableSample$Time)
# Select the desired species
PBE_records <- recordTableSample[recordTableSample$Species == "PBE", ]

# Plot only data
plot_activity(true_data = PBE_records,
              times_true = "Time",
              unit = "clock")

# Plot only data (density)
plot_activity(true_data = PBE_records,
              times_true = "Time",
              unit = "clock",
              freq = FALSE)

# Fit model
# Convert hours to times format
PBE_records$time_radians <- as.numeric(PBE_records$Time)*2*pi
vm <- activity::fitact(PBE_records$time_radians)
pdf_vm <- as.data.frame(vm@pdf)

# Plot data and fitted model in radians
plot_activity(fitted_data = pdf_vm,
              times_fit = "x",
              y_fit = "y",
              unit = "radians",
              freq = FALSE,
              n = nrow(PBE_records))

# Plot data and fitted model in hours
plot_activity(fitted_data = pdf_vm,
              times_fit = "x",
              y_fit = "y",
              unit = "clock",
              freq = FALSE,
              n = nrow(PBE_records))
}
